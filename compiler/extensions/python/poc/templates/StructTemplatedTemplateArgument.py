"""
Automatically generated by Zserio Python extension version 1.3.0.
"""

import zserio

import templates.Field_Compound_uint32

class StructTemplatedTemplateArgument():
    def __init__(self):
        self._compoundField_ = None

    @classmethod
    def fromReader(cls, reader):
        instance = cls()
        instance.read(reader)

        return instance

    @classmethod
    def fromFields(cls, compoundField_):
        instance = cls()
        instance.setCompoundField(compoundField_)

        return instance

    def __eq__(self, other):
        if isinstance(other, StructTemplatedTemplateArgument):
            return self._compoundField_ == other._compoundField_

        return False

    def __hash__(self):
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calcHashCode(result, hash(self._compoundField_))

        return result

    def getCompoundField(self):
        return self._compoundField_

    def setCompoundField(self, compoundField_):
        self._compoundField_ = compoundField_

    def bitSizeOf(self, bitPosition=0):
        endBitPosition = bitPosition
        endBitPosition += self._compoundField_.bitSizeOf(endBitPosition)

        return endBitPosition - bitPosition

    def initializeOffsets(self, bitPosition):
        endBitPosition = bitPosition
        endBitPosition = self._compoundField_.initializeOffsets(endBitPosition)

        return endBitPosition

    def read(self, reader):
        self._compoundField_ = templates.Field_Compound_uint32.Field_Compound_uint32.fromReader(reader)

    def write(self, writer, *, callInitializeOffsets=True):
        del callInitializeOffsets

        self._compoundField_.write(writer, callInitializeOffsets=False)
