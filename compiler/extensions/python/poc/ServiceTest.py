import grpc
from concurrent import futures

import service_poc.api as api
import zserio_service_grpc.zserio_service
import zserio_service_http.zserio_service

from SimpleServiceImpl import SimpleServiceImpl

def doCall(service, value):
    # SimpleService client fully generated by zserio
    client = api.SimpleService.Client(service)
    request = api.Request.fromFields(value)
    response = client.callPowerOfTwo(request)
    print("    powerOfTwo(%d) = %d" % (value, response.getValue()))
    response = client.callPowerOfFour(request)
    print("    powerOfFour(%d) = %d" % (value, response.getValue()))

def directCall(service, value):
    print("calling service directly:")
    doCall(service, value)

def grpcCall(service, value):
    print("calling service via gRPC:")

    # setup grpc server
    grpcServer = grpc.server(futures.ThreadPoolExecutor())
    port = grpcServer.add_insecure_port("localhost:0")
    # wraps SimpleService by GrpcService and registers it to the server
    zserio_service_grpc.zserio_service.registerService(service, grpcServer)
    grpcServer.start()

    # setup grpc client
    grpcChannel = grpc.insecure_channel("localhost:%d" % port)
    grpcClient = zserio_service_grpc.zserio_service.GrpcClient(grpcChannel)

    # use zserio GrpcClient instead of zserio service
    doCall(grpcClient, value)

def httpCall(service, value):
    print("calling service via HTTP:")

    # setup http client
    httpClient = zserio_service_http.zserio_service.HttpClient("localhost", 5000)

    # use zserio HttpClient instead of zserio service
    doCall(httpClient, value)

if __name__ == "__main__":
    # create SimpleService instance
    service = SimpleServiceImpl()

    directCall(service, 2)
    grpcCall(service, 3)
    httpCall(service, 4)
