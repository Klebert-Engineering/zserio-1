# Automatically generated by Zserio Python extension version 2.9.0-pre1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode

from __future__ import annotations

import typing
import zserio

class WalkerNested:
    def __init__(
            self,
            text_: str = str()) -> None:
        self._text_ = text_

    @classmethod
    def from_reader(
            cls: typing.Type['WalkerNested'],
            zserio_reader: zserio.BitStreamReader) -> 'WalkerNested':
        instance = cls()
        instance.read(zserio_reader)

        return instance

    @classmethod
    def from_reader_packed(
            cls: typing.Type['WalkerNested'],
            zserio_context_node: zserio.array.PackingContextNode,
            zserio_reader: zserio.BitStreamReader) -> 'WalkerNested':
        instance = cls()
        instance.read_packed(zserio_context_node, zserio_reader)

        return instance

    @staticmethod
    def type_info() -> zserio.typeinfo.TypeInfo:
        field_list: typing.List[zserio.typeinfo.MemberInfo] = [
            zserio.typeinfo.MemberInfo(
                'text', zserio.typeinfo.TypeInfo('string', str),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME : 'text'
                }
            )
        ]
        attribute_list = {
            zserio.typeinfo.TypeAttribute.FIELDS : field_list
        }

        return zserio.typeinfo.TypeInfo("test_object.WalkerNested", WalkerNested, attributes=attribute_list)

    def __eq__(self, other: object) -> bool:
        if isinstance(other, WalkerNested):
            return (self._text_ == other._text_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._text_)

        return result

    @property
    def text(self) -> str:
        return self._text_

    @text.setter
    def text(self, text_: str) -> None:
        self._text_ = text_

    @staticmethod
    def create_packing_context(zserio_context_node: zserio.array.PackingContextNode) -> None:
        zserio_context_node.create_child()

    def init_packing_context(self, zserio_context_node: zserio.array.PackingContextNode) -> None:
        del zserio_context_node

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context_node: zserio.array.PackingContextNode,
                         bitposition: int = 0) -> int:
        del zserio_context_node

        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context_node: zserio.array.PackingContextNode,
                                  bitposition: int) -> int:
        del zserio_context_node

        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._text_ = zserio_reader.read_string()

    def read_packed(self, zserio_context_node: zserio.array.PackingContextNode,
                    zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context_node

        self._text_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._text_)

    def write_packed(self, zserio_context_node: zserio.array.PackingContextNode,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context_node

        zserio_writer.write_string(self._text_)
