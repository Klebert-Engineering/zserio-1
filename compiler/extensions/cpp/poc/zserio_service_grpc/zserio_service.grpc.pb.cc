// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zserio_service.proto

#include "zserio_service.pb.h"
#include "zserio_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zserio_service_grpc {

static const char* ZserioService_method_names[] = {
  "/zserio_service_grpc.ZserioService/callProcedure",
};

std::unique_ptr< ZserioService::Stub> ZserioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ZserioService::Stub> stub(new ZserioService::Stub(channel));
  return stub;
}

ZserioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_callProcedure_(ZserioService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ZserioService::Stub::callProcedure(::grpc::ClientContext* context, const ::zserio_service_grpc::Request& request, ::zserio_service_grpc::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_callProcedure_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::zserio_service_grpc::Response>* ZserioService::Stub::AsynccallProcedureRaw(::grpc::ClientContext* context, const ::zserio_service_grpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::zserio_service_grpc::Response>::Create(channel_.get(), cq, rpcmethod_callProcedure_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zserio_service_grpc::Response>* ZserioService::Stub::PrepareAsynccallProcedureRaw(::grpc::ClientContext* context, const ::zserio_service_grpc::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::zserio_service_grpc::Response>::Create(channel_.get(), cq, rpcmethod_callProcedure_, context, request, false);
}

ZserioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ZserioService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ZserioService::Service, ::zserio_service_grpc::Request, ::zserio_service_grpc::Response>(
          std::mem_fn(&ZserioService::Service::callProcedure), this)));
}

ZserioService::Service::~Service() {
}

::grpc::Status ZserioService::Service::callProcedure(::grpc::ServerContext* context, const ::zserio_service_grpc::Request* request, ::zserio_service_grpc::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zserio_service_grpc

