/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "String.h"


String::String()
{
}

String::String(zserio::BitStreamReader& in)
{
    read(in);
}

std::string& String::getStr()
{
    return m_str_;
}

const std::string& String::getStr() const
{
    return m_str_;
}

void String::setStr(const std::string& str_)
{
    m_str_ = str_;
}

void String::setStr(std::string&& str_)
{
    m_str_ = std::move(str_);
}

size_t String::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfString(m_str_);

    return endBitPosition - bitPosition;
}

size_t String::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfString(m_str_);

    return endBitPosition;
}

bool String::operator==(const String& other) const
{
    if (this != &other)
    {
        return
                (m_str_ == other.m_str_);
    }

    return true;
}

int String::hashCode() const
{
    int result = zserio::HASH_SEED;

    result = zserio::calcHashCode(result, m_str_);

    return result;
}

void String::read(zserio::BitStreamReader& in)
{
    m_str_ = (std::string)in.readString();
}

void String::write(zserio::BitStreamWriter& out, zserio::PreWriteAction)
{
    out.writeString(m_str_);
}

