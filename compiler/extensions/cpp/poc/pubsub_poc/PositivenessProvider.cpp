/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#include "zserio/BitStreamWriter.h"
#include "zserio/BitStreamReader.h"
#include "zserio/StringConvertUtil.h"

#include "zserio_runtime/PubSubException.h"

#include "PositivenessProvider.h"

namespace pubsub_poc
{

PositivenessProvider::PositivenessProvider(::zserio::IPubSubClient& pubSubClient) : m_pubSubClient(pubSubClient)
{
}

void PositivenessProvider::publishPositiveness(::pubsub_poc::BoolValue& object, void* context) const
{
    publishZserioObject(object, "pubsub/boolean/positiveness", context);
}

::zserio::IPubSubClient::SubscriptionId PositivenessProvider::subscribeRequest(
        const std::function<void(const std::string& topic, const ::pubsub_poc::Int32Value& object)>& callback,
        void* context)
{
    const ::zserio::IPubSubClient::OnTopic rawCallback = std::bind(&PositivenessProvider::onRawInt32Value, this,
            std::placeholders::_1, std::placeholders::_2, std::placeholders::_3);
    const std::string topic("pubsub/request");
    const ::zserio::IPubSubClient::SubscriptionId id = m_pubSubClient.subscribe(topic, rawCallback, context);

    const auto result = m_subscribersInt32Value.emplace(id, callback);
    if (!result.second)
    {
        throw ::zserio::PubSubException("pubsub_poc.PositivenessProvider: Topic '" + topic +
                "' already subscribed!");
    }

    return id;
}

void PositivenessProvider::unsubscribeRequest(zserio::IPubSubClient::SubscriptionId id)
{
    const auto foundSubscriber = m_subscribersInt32Value.find(id);
    if (foundSubscriber == m_subscribersInt32Value.end())
        throw ::zserio::PubSubException("pubsub_poc.PositivenessProvider: Unknown subscription id '" +
                ::zserio::convertToString(id) + "' for 'Int32Value' !");

    m_pubSubClient.unsubscribe(id);
    m_subscribersInt32Value.erase(foundSubscriber);
}

void PositivenessProvider::onRawInt32Value(zserio::IPubSubClient::SubscriptionId id, const std::string& topic,
        const std::vector<uint8_t>& data) const
{
    ::zserio::BitStreamReader reader(data.data(), data.size());
    const Int32Value object(reader);

    const auto foundSubscriber = m_subscribersInt32Value.find(id);
    if (foundSubscriber == m_subscribersInt32Value.end())
    {
        throw ::zserio::PubSubException("pubsub_poc.PositivenessProvider: Unknown subscription id '" +
                ::zserio::convertToString(id) + "' for 'Int32Value' !");
    }
    foundSubscriber->second(topic, object);
}

template<typename ZSERIO_OBJECT>
void PositivenessProvider::publishZserioObject(ZSERIO_OBJECT& object, const std::string& topic,
        void* context) const
{
    std::vector<uint8_t> data(object.bitSizeOf() + 7 / 8);
    ::zserio::BitStreamWriter writer(data.data(), data.size());
    object.write(writer);
    m_pubSubClient.publish(topic, data, context);
}

} // namespace pubsub_poc
