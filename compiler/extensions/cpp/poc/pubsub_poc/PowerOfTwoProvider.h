/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#ifndef SIMPLE_PUB_SUB_H
#define SIMPLE_PUB_SUB_H

#include <functional>
#include <string>
#include <vector>
#include <map>

#include "zserio_runtime/IPubSubClient.h"

#include "pubsub_poc/UInt64Value.h"
#include "pubsub_poc/Int32Value.h"

namespace pubsub_poc
{

class PowerOfTwoProvider
{
public:
    explicit PowerOfTwoProvider(::zserio::IPubSubClient& pubSubClient);
    ~PowerOfTwoProvider() = default;

    PowerOfTwoProvider(const PowerOfTwoProvider&) = default;
    PowerOfTwoProvider& operator=(const PowerOfTwoProvider&) = default;

    PowerOfTwoProvider(PowerOfTwoProvider&&) = default;
    PowerOfTwoProvider& operator=(PowerOfTwoProvider&&) = default;

    void publishPowerOfTwo(::pubsub_poc::UInt64Value& object, void* context = nullptr) const;

    ::zserio::IPubSubClient::SubscriptionId subscribeRequest(
            const std::function<void(const std::string& topic, const ::pubsub_poc::Int32Value& object)>& callback,
            void* context = nullptr);
    void unsubscribeRequest(zserio::IPubSubClient::SubscriptionId id);

private:
    void onRawInt32Value(zserio::IPubSubClient::SubscriptionId id, const std::string& topic,
            const std::vector<uint8_t>& data) const;

    template<typename ZSERIO_OBJECT>
    void publishZserioObject(ZSERIO_OBJECT& object, const std::string& topic, void* context) const;

    zserio::IPubSubClient& m_pubSubClient;

    std::map<::zserio::IPubSubClient::SubscriptionId,
            std::function<void(const std::string& topic,
                    const ::pubsub_poc::Int32Value& object)>> m_subscribersInt32Value;
};

} // namespace pubsub_poc

#endif // ifndef SIMPLE_PUB_SUB_H
