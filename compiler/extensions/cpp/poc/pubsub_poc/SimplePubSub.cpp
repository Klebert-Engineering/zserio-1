/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#include "zserio/BitStreamWriter.h"
#include "zserio/BitStreamReader.h"
#include "zserio/StringConvertUtil.h"

#include "zserio_runtime/PubSubException.h"

#include "SimplePubSub.h"

namespace pubsub_poc
{

SimplePubSub::SimplePubSub(::zserio::IPubSubClient& pubSubClient) : m_pubSubClient(pubSubClient)
{
}

void SimplePubSub::publishUInt64ValuePub(::pubsub_poc::UInt64Value& object, void* context) const
{
    publishZserioObject(object, "pubsub/uint64", context);
}

void SimplePubSub::publishInt32ValuePub(::pubsub_poc::Int32Value& object, void* context) const
{
    publishZserioObject(object, "pubsub/int32", context);
}

void SimplePubSub::publishBoolValuePub(::pubsub_poc::BoolValue& object, void* context) const
{
    publishZserioObject(object, "pubsub/bool", context);
}

::zserio::IPubSubClient::SubscriptionId SimplePubSub::subscribeUInt64ValueSub(
        const std::function<void(const std::string& topic, const ::pubsub_poc::UInt64Value& object)>& callback,
        void* context)
{
    const ::zserio::IPubSubClient::OnTopic rawCallback = std::bind(&SimplePubSub::onRawUInt64ValueSub, this,
            std::placeholders::_1, std::placeholders::_2);
    const std::string topic("pubsub/uint64");
    const ::zserio::IPubSubClient::SubscriptionId id =
            m_pubSubClient.subscribe(topic, rawCallback, context);

    const auto result = m_subscribersUInt64ValueSub.insert({id, callback});
    if (!result.second)
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Topic '" + topic + "' already subscribed!");

    return id;
}

void SimplePubSub::unsubscribeUInt64ValueSub(zserio::IPubSubClient::SubscriptionId id)
{
    const auto foundSubscriber = m_subscribersUInt64ValueSub.find(id);
    if (foundSubscriber == m_subscribersUInt64ValueSub.end())
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Unknown subscription id '" +
                ::zserio::convertToString(id) + "' for 'UInt64Value' !");

    m_pubSubClient.unsubscribe(id);
    m_subscribersUInt64ValueSub.erase(foundSubscriber);
}

::zserio::IPubSubClient::SubscriptionId SimplePubSub::subscribeInt32ValueSub(
        const std::function<void(const std::string& topic, const ::pubsub_poc::Int32Value& object)>& callback,
        void* context)
{
    const ::zserio::IPubSubClient::OnTopic rawCallback = std::bind(&SimplePubSub::onRawInt32ValueSub, this,
            std::placeholders::_1, std::placeholders::_2);
    const std::string topic("pubsub/int32");
    const ::zserio::IPubSubClient::SubscriptionId id =
            m_pubSubClient.subscribe(topic, rawCallback, context);

    const auto result = m_subscribersInt32ValueSub.insert({id, callback});
    if (!result.second)
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Topic '" + topic + "' already subscribed!");

    return id;
}

void SimplePubSub::unsubscribeInt32ValueSub(zserio::IPubSubClient::SubscriptionId id)
{
    const auto foundSubscriber = m_subscribersInt32ValueSub.find(id);
    if (foundSubscriber == m_subscribersInt32ValueSub.end())
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Unknown subscription id '" +
                ::zserio::convertToString(id) + "' for 'Int32Value' !");

    m_pubSubClient.unsubscribe(id);
    m_subscribersInt32ValueSub.erase(foundSubscriber);
}

::zserio::IPubSubClient::SubscriptionId SimplePubSub::subscribeBoolValueSub(
        const std::function<void(const std::string& topic, const ::pubsub_poc::BoolValue& object)>& callback,
        void* context)
{
    const ::zserio::IPubSubClient::OnTopic rawCallback = std::bind(&SimplePubSub::onRawBoolValueSub, this,
            std::placeholders::_1, std::placeholders::_2);
    const std::string topic("pubsub/bool");
    const ::zserio::IPubSubClient::SubscriptionId id =
            m_pubSubClient.subscribe(topic, rawCallback, context);

    const auto result = m_subscribersBoolValueSub.insert({id, callback});
    if (!result.second)
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Topic '" + topic + "' already subscribed!");

    return id;
}

void SimplePubSub::unsubscribeBoolValueSub(zserio::IPubSubClient::SubscriptionId id)
{
    const auto foundSubscriber = m_subscribersBoolValueSub.find(id);
    if (foundSubscriber == m_subscribersBoolValueSub.end())
        throw ::zserio::PubSubException("pubsub_poc.SimplePubSub: Unknown subscription id '" +
                ::zserio::convertToString(id) + "' for 'BoolValue' !");

    m_pubSubClient.unsubscribe(id);
    m_subscribersBoolValueSub.erase(foundSubscriber);
}

void SimplePubSub::onRawUInt64ValueSub(const std::string& topic, const std::vector<uint8_t>& data) const
{
    ::zserio::BitStreamReader reader(data.data(), data.size());
    const UInt64Value object(reader);

    for (const auto& subscribers : m_subscribersUInt64ValueSub)
        subscribers.second(topic, object);
}

void SimplePubSub::onRawInt32ValueSub(const std::string& topic, const std::vector<uint8_t>& data) const
{
    ::zserio::BitStreamReader reader(data.data(), data.size());
    const Int32Value object(reader);

    for (const auto& subscribers : m_subscribersInt32ValueSub)
        subscribers.second(topic, object);
}

void SimplePubSub::onRawBoolValueSub(const std::string& topic, const std::vector<uint8_t>& data) const
{
    ::zserio::BitStreamReader reader(data.data(), data.size());
    const BoolValue object(reader);

    for (const auto& subscribers : m_subscribersBoolValueSub)
        subscribers.second(topic, object);
}

template<typename ZSERIO_OBJECT>
void SimplePubSub::publishZserioObject(ZSERIO_OBJECT& object, const std::string& topic,
        void* context) const
{
    std::vector<uint8_t> data(object.bitSizeOf() + 7 / 8);
    ::zserio::BitStreamWriter writer(data.data(), data.size());
    object.write(writer);
    m_pubSubClient.publish(topic, data, context);
}

} // namespace pubsub_poc
