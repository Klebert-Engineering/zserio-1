#include <memory>
#include <iostream>

#include "service_poc/SimpleService.h"
#include "zserio_service_grpc/ZserioService.h"
#include "zserio_service_http/ZserioService.h"

/** Implementation of SimpleService. */
class SimpleServiceImpl : public service_poc::SimpleService::Service
{
    void powerOfTwoImpl(const service_poc::Request& request, service_poc::Response& response) override
    {
        response.setValue(static_cast<uint64_t>(request.getValue() * request.getValue()));
    }

    void powerOfFourImpl(const service_poc::Request& request, service_poc::Response& response) override
    {
        response.setValue(static_cast<uint64_t>(
                request.getValue() * request.getValue() * request.getValue() * request.getValue()));
    }
};

void doCall(::zserio::IService& service, int32_t value)
{
    // simple service client fully generated by zserio
    service_poc::SimpleService::Client client(service);
    service_poc::Request request(value);
    service_poc::Response response;
    client.powerOfTwoMethod(request, response);
    std::cout << "    powerOfTwo(" << value << ") = " << response.getValue() << std::endl;
    client.powerOfFourMethod(request, response);
    std::cout << "    powerOfFour(" << value << ") = " << response.getValue() << std::endl;
}

void directCall(::zserio::IService& service, int32_t value)
{
    std::cout << "calling service directly:" << std::endl;
    doCall(service, value);
}

void grpcCall(::zserio::IService& service, int32_t value)
{
    std::cout << "calling service via gRPC:" << std::endl;

    // setup grpc server
    ::grpc::ServerBuilder serverBuilder;
    // wrap SimpleService by GrpcService
    ::zserio_service_grpc::GrpcService grpcService(service);
    serverBuilder.RegisterService(&grpcService);
    std::unique_ptr<::grpc::Server> grpcServer = serverBuilder.BuildAndStart();

    // setup grpc client
    ::zserio_service_grpc::GrpcClient grpcClient(grpcServer->InProcessChannel(::grpc::ChannelArguments()));

    // use zserio GrpcClient as IService
    doCall(grpcClient, value);
}

void httpCall(::zserio::IService& service, int32_t value)
{
    std::cout << "calling service via HTTP:" << std::endl;

    // setup http client
    ::zserio_service_http::HttpClient httpClient("localhost", 5000);

    doCall(httpClient, value);
}

int main(int argc, char* argv[])
{
    SimpleServiceImpl service;

    directCall(service, 2);
    grpcCall(service, 3);
    httpCall(service, 4);
}
