/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/VarUInt64Util.h>
#include <zserio/Arrays.h>

#include "Union.h"


Union::Union() :
        m_choiceTag(UNDEFINED_CHOICE)
{
}

Union::Union(zserio::BitStreamReader& in)
{
    read(in);
}

Union::ChoiceTag Union::choiceTag() const
{
    return m_choiceTag;
}

std::vector<uint8_t>& Union::getChars()
{
    return m_objectChoice.get<std::vector<uint8_t>>();
}

const std::vector<uint8_t>& Union::getChars() const
{
    return m_objectChoice.get<std::vector<uint8_t>>();
}

void Union::setChars(const std::vector<uint8_t>& chars_)
{
    m_choiceTag = CHOICE_chars;
    m_objectChoice.set(chars_);
}

void Union::setChars(std::vector<uint8_t>&& chars_)
{
    m_choiceTag = CHOICE_chars;
    m_objectChoice.set(std::move(chars_));
}

Structure& Union::getText()
{
    return m_objectChoice.get<Structure>();
}

const Structure& Union::getText() const
{
    return m_objectChoice.get<Structure>();
}

void Union::setText(const Structure& text_)
{
    m_choiceTag = CHOICE_text;
    m_objectChoice.set(text_);
}

void Union::setText(Structure&& text_)
{
    m_choiceTag = CHOICE_text;
    m_objectChoice.set(std::move(text_));
}

size_t Union::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfVarUInt64(m_choiceTag);

    switch (m_choiceTag)
    {
    case CHOICE_chars:
        endBitPosition += zserio::bitSizeOfAuto<zserio::StdIntArrayTraits<uint8_t>>(
                m_objectChoice.get<std::vector<uint8_t>>(), endBitPosition);
        break;
    case CHOICE_text:
        endBitPosition += m_objectChoice.get<Structure>().bitSizeOf(endBitPosition);
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }

    return endBitPosition - bitPosition;
}

bool Union::operator==(const Union& other) const
{
    if (this == &other)
        return true;

    if (m_choiceTag != other.m_choiceTag)
        return false;

    switch (m_choiceTag)
    {
    case CHOICE_chars:
        return m_objectChoice.get<std::vector<uint8_t>>() == other.m_objectChoice.get<std::vector<uint8_t>>();
        break;
    case CHOICE_text:
        return m_objectChoice.get<Structure>() == other.m_objectChoice.get<Structure>();
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }

    return true;
}

int Union::hashCode() const
{
    int result = zserio::HASH_SEED;

    result = zserio::calcHashCode(result, static_cast<int>(m_choiceTag));
    switch (m_choiceTag)
    {
    case CHOICE_chars:
        result = zserio::calcHashCode(result, m_objectChoice.get<std::vector<uint8_t>>());
        break;
    case CHOICE_text:
        result = zserio::calcHashCode(result, m_objectChoice.get<Structure>());
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }

    return result;
}

void Union::read(zserio::BitStreamReader& in)
{
    m_choiceTag = static_cast<ChoiceTag>(zserio::convertVarUInt64ToInt(in.readVarUInt64()));

    switch (m_choiceTag)
    {
    case CHOICE_chars:
    {
        std::vector<uint8_t> chars_;
        zserio::readAuto<zserio::StdIntArrayTraits<uint8_t>>(chars_, in);
        m_objectChoice = std::move(chars_);
        break;
    }
    case CHOICE_text:
        m_objectChoice = Structure(in);
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }
}

size_t Union::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfVarUInt64(m_choiceTag);

    switch (m_choiceTag)
    {
    case CHOICE_chars:
        endBitPosition = zserio::initializeOffsetsAuto<zserio::StdIntArrayTraits<uint8_t>>(
                m_objectChoice.get<std::vector<uint8_t>>(), endBitPosition);
        break;
    case CHOICE_text:
        endBitPosition = m_objectChoice.get<Structure>().initializeOffsets(endBitPosition);
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }

    return endBitPosition;
}

void Union::write(zserio::BitStreamWriter& out, zserio::PreWriteAction)
{
    out.writeVarUInt64(m_choiceTag);

    switch (m_choiceTag)
    {
    case CHOICE_chars:
        zserio::writeAuto<zserio::StdIntArrayTraits<uint8_t>>(m_objectChoice.get<std::vector<uint8_t>>(), out);
        break;
    case CHOICE_text:
        m_objectChoice.get<Structure>().write(out, zserio::NO_PRE_WRITE_ACTION);
        break;
    default:
        throw zserio::CppRuntimeException("No match in union Union!");
    }
}

