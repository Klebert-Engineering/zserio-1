/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "Structure.h"


Structure::Structure()
{
}

Structure::Structure(zserio::BitStreamReader& in)
{
    read(in);
}

std::string& Structure::getText()
{
    return m_text_;
}

const std::string& Structure::getText() const
{
    return m_text_;
}

void Structure::setText(const std::string& text_)
{
    m_text_ = text_;
}

void Structure::setText(std::string&& text_)
{
    m_text_ = std::move(text_);
}

size_t Structure::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfString(m_text_);

    return endBitPosition - bitPosition;
}

size_t Structure::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += zserio::getBitSizeOfString(m_text_);

    return endBitPosition;
}

bool Structure::operator==(const Structure& _other) const
{
    if (this != &_other)
    {
        return
                (m_text_ == _other.m_text_);
    }

    return true;
}

int Structure::hashCode() const
{
    int _result = zserio::HASH_SEED;

    _result = zserio::calcHashCode(_result, m_text_);

    return _result;
}

void Structure::read(zserio::BitStreamReader& in)
{
    m_text_ = (std::string)in.readString();
}

void Structure::write(zserio::BitStreamWriter& out, zserio::PreWriteAction)
{
    out.writeString(m_text_);
}

