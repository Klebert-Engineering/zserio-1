/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <templates/Field_Compound_uint32.h>

namespace templates
{

Field_Compound_uint32::Field_Compound_uint32() noexcept
{
}

Field_Compound_uint32::Field_Compound_uint32(::zserio::BitStreamReader& in) :
        m_value_(readValue(in))
{
}

::templates::Compound_uint32& Field_Compound_uint32::getValue()
{
    return m_value_;
}

const ::templates::Compound_uint32& Field_Compound_uint32::getValue() const
{
    return m_value_;
}

void Field_Compound_uint32::setValue(const ::templates::Compound_uint32& value_)
{
    m_value_ = value_;
}

void Field_Compound_uint32::setValue(::templates::Compound_uint32&& value_)
{
    m_value_ = ::std::move(value_);
}

size_t Field_Compound_uint32::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_value_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Field_Compound_uint32::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_value_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool Field_Compound_uint32::operator==(const Field_Compound_uint32& other) const
{
    if (this != &other)
    {
        return
                (m_value_ == other.m_value_);
    }

    return true;
}

int Field_Compound_uint32::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void Field_Compound_uint32::read(::zserio::BitStreamReader& in)
{
    m_value_ = readValue(in);
}

void Field_Compound_uint32::write(::zserio::BitStreamWriter& out, ::zserio::PreWriteAction)
{
    m_value_.write(out, ::zserio::NO_PRE_WRITE_ACTION);
}

::templates::Compound_uint32 Field_Compound_uint32::readValue(::zserio::BitStreamReader& in)
{
    return ::templates::Compound_uint32(in);
}

} // namespace templates
