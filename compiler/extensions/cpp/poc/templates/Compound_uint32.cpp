/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <templates/Compound_uint32.h>

namespace templates
{

Compound_uint32::Compound_uint32() noexcept :
        m_value_(uint32_t())
{
}

Compound_uint32::Compound_uint32(::zserio::BitStreamReader& in) :
        m_value_(readValue(in))
{
}

uint32_t Compound_uint32::getValue() const
{
    return m_value_;
}

void Compound_uint32::setValue(uint32_t value_)
{
    m_value_ = value_;
}

size_t Compound_uint32::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t Compound_uint32::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

bool Compound_uint32::operator==(const Compound_uint32& other) const
{
    if (this != &other)
    {
        return
                (m_value_ == other.m_value_);
    }

    return true;
}

int Compound_uint32::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void Compound_uint32::read(::zserio::BitStreamReader& in)
{
    m_value_ = readValue(in);
}

void Compound_uint32::write(::zserio::BitStreamWriter& out, ::zserio::PreWriteAction)
{
    out.writeBits(m_value_, UINT8_C(32));
}

uint32_t Compound_uint32::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readBits(UINT8_C(32)));
}

} // namespace templates
