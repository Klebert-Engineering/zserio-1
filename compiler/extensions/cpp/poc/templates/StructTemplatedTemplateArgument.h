/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#ifndef TEMPLATES_STRUCT_TEMPLATED_TEMPLATE_ARGUMENT_H
#define TEMPLATES_STRUCT_TEMPLATED_TEMPLATE_ARGUMENT_H

#include <type_traits>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>

#include <templates/Field_Compound_uint32.h>

namespace templates
{

class StructTemplatedTemplateArgument
{
public:
    StructTemplatedTemplateArgument() noexcept;

    template <typename ZSERIO_T_compoundField,
            typename ::std::enable_if<!::std::is_same<typename ::std::decay<ZSERIO_T_compoundField>::type, StructTemplatedTemplateArgument>::value,
                    int>::type = 0>
    explicit StructTemplatedTemplateArgument(
            ZSERIO_T_compoundField&& compoundField_) :
            m_compoundField_(::std::forward<ZSERIO_T_compoundField>(compoundField_))
    {
    }

    explicit StructTemplatedTemplateArgument(::zserio::BitStreamReader& in);

    ~StructTemplatedTemplateArgument() = default;

    StructTemplatedTemplateArgument(const StructTemplatedTemplateArgument&) = default;
    StructTemplatedTemplateArgument& operator=(const StructTemplatedTemplateArgument&) = default;

    StructTemplatedTemplateArgument(StructTemplatedTemplateArgument&&) = default;
    StructTemplatedTemplateArgument& operator=(StructTemplatedTemplateArgument&&) = default;

    ::templates::Field_Compound_uint32& getCompoundField();
    const ::templates::Field_Compound_uint32& getCompoundField() const;
    void setCompoundField(const ::templates::Field_Compound_uint32& compoundField_);
    void setCompoundField(::templates::Field_Compound_uint32&& compoundField_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const StructTemplatedTemplateArgument& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    ::templates::Field_Compound_uint32 readCompoundField(::zserio::BitStreamReader& in);

    ::templates::Field_Compound_uint32 m_compoundField_;
};

} // namespace templates

#endif // TEMPLATES_STRUCT_TEMPLATED_TEMPLATE_ARGUMENT_H
