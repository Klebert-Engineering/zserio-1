/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <templates/StructTemplatedTemplateArgument.h>

namespace templates
{

StructTemplatedTemplateArgument::StructTemplatedTemplateArgument() noexcept
{
}

StructTemplatedTemplateArgument::StructTemplatedTemplateArgument(::zserio::BitStreamReader& in) :
        m_compoundField_(readCompoundField(in))
{
}

::templates::Field_Compound_uint32& StructTemplatedTemplateArgument::getCompoundField()
{
    return m_compoundField_;
}

const ::templates::Field_Compound_uint32& StructTemplatedTemplateArgument::getCompoundField() const
{
    return m_compoundField_;
}

void StructTemplatedTemplateArgument::setCompoundField(const ::templates::Field_Compound_uint32& compoundField_)
{
    m_compoundField_ = compoundField_;
}

void StructTemplatedTemplateArgument::setCompoundField(::templates::Field_Compound_uint32&& compoundField_)
{
    m_compoundField_ = ::std::move(compoundField_);
}

size_t StructTemplatedTemplateArgument::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_compoundField_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t StructTemplatedTemplateArgument::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_compoundField_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool StructTemplatedTemplateArgument::operator==(const StructTemplatedTemplateArgument& other) const
{
    if (this != &other)
    {
        return
                (m_compoundField_ == other.m_compoundField_);
    }

    return true;
}

int StructTemplatedTemplateArgument::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_compoundField_);

    return result;
}

void StructTemplatedTemplateArgument::read(::zserio::BitStreamReader& in)
{
    m_compoundField_ = readCompoundField(in);
}

void StructTemplatedTemplateArgument::write(::zserio::BitStreamWriter& out, ::zserio::PreWriteAction)
{
    m_compoundField_.write(out, ::zserio::NO_PRE_WRITE_ACTION);
}

::templates::Field_Compound_uint32 StructTemplatedTemplateArgument::readCompoundField(::zserio::BitStreamReader& in)
{
    return ::templates::Field_Compound_uint32(in);
}

} // namespace templates
