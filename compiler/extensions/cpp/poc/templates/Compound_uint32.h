/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#ifndef TEMPLATES_COMPOUND_UINT32_H
#define TEMPLATES_COMPOUND_UINT32_H

#include <type_traits>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

namespace templates
{

class Compound_uint32
{
public:
    Compound_uint32() noexcept;

    explicit Compound_uint32(
            uint32_t value_) :
            m_value_(value_)
    {
    }

    explicit Compound_uint32(::zserio::BitStreamReader& in);

    ~Compound_uint32() = default;

    Compound_uint32(const Compound_uint32&) = default;
    Compound_uint32& operator=(const Compound_uint32&) = default;

    Compound_uint32(Compound_uint32&&) = default;
    Compound_uint32& operator=(Compound_uint32&&) = default;

    uint32_t getValue() const;
    void setValue(uint32_t value_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Compound_uint32& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint32_t readValue(::zserio::BitStreamReader& in);

    uint32_t m_value_;
};

} // namespace templates

#endif // TEMPLATES_COMPOUND_UINT32_H
