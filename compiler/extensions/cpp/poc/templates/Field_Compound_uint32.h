/**
 * Automatically generated by Zserio C++ extension version 1.3.0.
 */

#ifndef TEMPLATES_FIELD_COMPOUND_UINT32_H
#define TEMPLATES_FIELD_COMPOUND_UINT32_H

#include <type_traits>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>

#include <templates/Compound_uint32.h>

namespace templates
{

class Field_Compound_uint32
{
public:
    Field_Compound_uint32() noexcept;

    template <typename ZSERIO_T_value,
            typename ::std::enable_if<!::std::is_same<typename ::std::decay<ZSERIO_T_value>::type, Field_Compound_uint32>::value,
                    int>::type = 0>
    explicit Field_Compound_uint32(
            ZSERIO_T_value&& value_) :
            m_value_(::std::forward<ZSERIO_T_value>(value_))
    {
    }

    explicit Field_Compound_uint32(::zserio::BitStreamReader& in);

    ~Field_Compound_uint32() = default;

    Field_Compound_uint32(const Field_Compound_uint32&) = default;
    Field_Compound_uint32& operator=(const Field_Compound_uint32&) = default;

    Field_Compound_uint32(Field_Compound_uint32&&) = default;
    Field_Compound_uint32& operator=(Field_Compound_uint32&&) = default;

    ::templates::Compound_uint32& getValue();
    const ::templates::Compound_uint32& getValue() const;
    void setValue(const ::templates::Compound_uint32& value_);
    void setValue(::templates::Compound_uint32&& value_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Field_Compound_uint32& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    ::templates::Compound_uint32 readValue(::zserio::BitStreamReader& in);

    ::templates::Compound_uint32 m_value_;
};

} // namespace templates

#endif // TEMPLATES_FIELD_COMPOUND_UINT32_H
