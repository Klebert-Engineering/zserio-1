/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef MAP_CONCRETE_VALUE_H
#define MAP_CONCRETE_VALUE_H

#include <type_traits>

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AnyHolder.h>
#include <zserio/PreWriteAction.h>
#include <string>
#include <zserio/Types.h>

#include <map/ConcreteType.h>

namespace map
{

class ConcreteValue
{
public:
    ConcreteValue() noexcept;

    template <typename ZSERIO_T,
            typename ::std::enable_if<!::std::is_same<typename ::std::decay<ZSERIO_T>::type, ConcreteValue>::value,
                    int>::type = 0>
    explicit ConcreteValue(
            ZSERIO_T&& value) :
            m_isInitialized(false),
            m_objectChoice(::std::forward<ZSERIO_T>(value))
    {
    }

    explicit ConcreteValue(::zserio::BitStreamReader& in,
            ::map::ConcreteType type_);

    ~ConcreteValue() = default;

    ConcreteValue(const ConcreteValue& other);
    ConcreteValue& operator=(const ConcreteValue& other);

    ConcreteValue(ConcreteValue&& other);
    ConcreteValue& operator=(ConcreteValue&& other);

    void initialize(
            ::map::ConcreteType type_);
    bool isInitialized() const;

    ::map::ConcreteType getType() const;

    uint32_t getValueU32() const;
    void setValueU32(uint32_t valueU32_);

    ::std::string& getValueString();
    const ::std::string& getValueString() const;
    void setValueString(const ::std::string& valueString_);
    void setValueString(::std::string&& valueString_);

    double getValueDouble() const;
    void setValueDouble(double valueDouble_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const ConcreteValue& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    ::zserio::AnyHolder readObject(::zserio::BitStreamReader& in);

    ::map::ConcreteType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder m_objectChoice;
};

} // namespace map

#endif // MAP_CONCRETE_VALUE_H
