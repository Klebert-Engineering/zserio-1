/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef MAP_MAP_H
#define MAP_MAP_H

#include <vector>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/Types.h>

#include <map/Element.h>

namespace map
{

template <typename ZSERIO_T_ARG_TYPE, typename ZSERIO_T_ARG_VALUE>
class Map
{
private:
    class ElementFactory_valueList
    {
    public:
        explicit ElementFactory_valueList(Map& owner) : m_owner(owner) {}

        void create(::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>& array, ::zserio::BitStreamReader& in, size_t index) const
        {
            (void)index;
            array.emplace_back(in, m_owner.getType());
        }

    private:
        Map& m_owner;
    };

    class ElementInitializer_valueList
    {
    public:
        explicit ElementInitializer_valueList(Map& owner) : m_owner(owner) {}

        void initialize(::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>& element, size_t index) const
        {
            (void)index;
            element.initialize(m_owner.getType());
        }

    private:
        Map& m_owner;
    };

    ZSERIO_T_ARG_TYPE readType(::zserio::BitStreamReader& in)
    {
        return ZSERIO_T_ARG_TYPE(in);
    }

    ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>> readValueList(::zserio::BitStreamReader& in)
    {
        ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>> readField;
        ::zserio::readAuto(::zserio::ObjectArrayTraits<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>, ElementFactory_valueList>(ElementFactory_valueList(*this)), readField, in);
        return readField;
    }

public:
    Map() noexcept :
            m_areChildrenInitialized(false),
            m_type_(ZSERIO_T_ARG_TYPE())
    {
    }

    template <typename ZSERIO_T_type, typename ZSERIO_T_valueList>
    explicit Map(
            ZSERIO_T_type&& type_,
            ZSERIO_T_valueList&& valueList_) :
            m_type_(::std::forward<ZSERIO_T_type>(type_)),
            m_valueList_(::std::forward<ZSERIO_T_valueList>(valueList_))
    {
    }

    explicit Map(::zserio::BitStreamReader& in) :
            m_areChildrenInitialized(true),
            m_type_(readType(in)),
            m_valueList_(readValueList(in))
    {
    }

    ~Map() = default;

    Map(const Map& other) :
        m_type_(other.m_type_),
        m_valueList_(other.m_valueList_)
    {
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;
    }
    Map& operator=(const Map& other)
    {
        m_type_ = other.m_type_;
        m_valueList_ = other.m_valueList_;
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;

        return *this;
    }

    Map(Map&& other) :
            m_type_(::std::move(other.m_type_)),
            m_valueList_(::std::move(other.m_valueList_))
    {
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;
    }
    Map& operator=(Map&& other)
    {
        m_type_ = ::std::move(other.m_type_);
        m_valueList_ = ::std::move(other.m_valueList_);
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;

        return *this;
    }

    void initializeChildren()
    {
        ::zserio::initializeElements(m_valueList_, ElementInitializer_valueList(*this));

        m_areChildrenInitialized = true;
    }

    const ZSERIO_T_ARG_TYPE& getType() const
    {
        return m_type_;
    }
    ZSERIO_T_ARG_TYPE& getType()
    {
        return m_type_;
    }
    void setType(const ZSERIO_T_ARG_TYPE& type_)
    {
        m_type_ = type_;
    }
    void setType(ZSERIO_T_ARG_TYPE&& type_)
    {
        m_type_ = std::move(type_);
    }

    ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>& getValueList()
    {
        return m_valueList_;
    }
    const ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>& getValueList() const
    {
        return m_valueList_;
    }
    void setValueList(const ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>& valueList_)
    {
        m_valueList_ = valueList_;
    }
    void setValueList(::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>&& valueList_)
    {
        m_valueList_ = std::move(valueList_);
    }

    size_t bitSizeOf(size_t bitPosition = 0) const
    {
        size_t endBitPosition = bitPosition;

        endBitPosition += m_type_.bitSizeOf(endBitPosition);
        endBitPosition += ::zserio::bitSizeOfAuto(::zserio::ObjectArrayTraits<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>(), m_valueList_, endBitPosition);

        return endBitPosition - bitPosition;
    }
    size_t initializeOffsets(size_t bitPosition)
    {
        size_t endBitPosition = bitPosition;

        endBitPosition = m_type_.initializeOffsets(endBitPosition);
        endBitPosition = ::zserio::initializeOffsetsAuto(::zserio::ObjectArrayTraits<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>(), m_valueList_, endBitPosition);

        return endBitPosition;
    }

    bool operator==(const Map& other) const
    {
        if (this != &other)
        {
            return
                    (m_type_ == other.m_type_) &&
                    (m_valueList_ == other.m_valueList_);
        }

        return true;
    }
    int hashCode() const
    {
        int result = ::zserio::HASH_SEED;

        result = ::zserio::calcHashCode(result, m_type_);
        result = ::zserio::calcHashCode(result, m_valueList_);

        return result;
    }

    void read(::zserio::BitStreamReader& in)
    {
        m_type_ = readType(in);
        m_valueList_ = readValueList(in);
    }

    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS)
    {
        if ((preWriteAction & ::zserio::PRE_WRITE_INITIALIZE_CHILDREN) != 0)
            initializeChildren();

        m_type_.write(out);
        ::zserio::writeAuto(::zserio::ObjectArrayTraits<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>>(), m_valueList_, out);
    }

private:
    bool m_areChildrenInitialized;
    ZSERIO_T_ARG_TYPE m_type_;
    ::std::vector<::map::Element<ZSERIO_T_ARG_TYPE, ZSERIO_T_ARG_VALUE>> m_valueList_;
};

} // namespace map

#endif // MAP_MAP_H
