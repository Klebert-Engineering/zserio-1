/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef MAP_CONCRETE_TYPE_H
#define MAP_CONCRETE_TYPE_H

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/Types.h>

namespace map
{

enum class ConcreteType : uint32_t
{
    U32 = UINT32_C(0),
    STRING = UINT32_C(1),
    DOUBLE = UINT32_C(2)
};

} // namespace map

namespace zserio
{

// This is full specialization of enumeration traits and methods for ConcreteType enumeration.
template <>
struct EnumTraits<::map::ConcreteType>
{
    static constexpr ::std::array<const char*, 3> names =
    {{
        "U32",
        "STRING",
        "DOUBLE"
    }};

    static constexpr ::std::array<::map::ConcreteType, 3> values =
    {{
        ::map::ConcreteType::U32,
        ::map::ConcreteType::STRING,
        ::map::ConcreteType::DOUBLE
    }};
};

template <>
size_t enumToOrdinal<::map::ConcreteType>(::map::ConcreteType value);

template <>
::map::ConcreteType valueToEnum<::map::ConcreteType>(
        typename ::std::underlying_type<::map::ConcreteType>::type rawValue);

template <>
size_t bitSizeOf<::map::ConcreteType>(::map::ConcreteType);

template <>
size_t initializeOffsets<::map::ConcreteType>(size_t bitPosition, ::map::ConcreteType value);

template <>
::map::ConcreteType read<::map::ConcreteType>(::zserio::BitStreamReader& in);

template <>
void write<::map::ConcreteType>(BitStreamWriter& out, ::map::ConcreteType value);

} // namespace zserio

#endif // MAP_CONCRETE_TYPE_H
