/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <map/ConcreteType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for ConcreteType enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::map::ConcreteType>::names;
constexpr ::std::array<::map::ConcreteType, 3> EnumTraits<::map::ConcreteType>::values;

template <>
size_t enumToOrdinal(::map::ConcreteType value)
{
    switch (value)
    {
    case ::map::ConcreteType::U32:
        return 0;
    case ::map::ConcreteType::STRING:
        return 1;
    case ::map::ConcreteType::DOUBLE:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ConcreteType: " +
                ::zserio::convertToString(static_cast<uint32_t>(value)) + "!");
    }
}

template <>
::map::ConcreteType valueToEnum(
        typename ::std::underlying_type<::map::ConcreteType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT32_C(0):
    case UINT32_C(1):
    case UINT32_C(2):
        return ::map::ConcreteType(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ConcreteType: " +
                ::zserio::convertToString(rawValue) + "!");
    }
}

template <>
size_t bitSizeOf(::map::ConcreteType)
{
    return UINT8_C(32);
}

template <>
size_t initializeOffsets(size_t bitPosition, ::map::ConcreteType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
::map::ConcreteType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::map::ConcreteType>(
            static_cast<typename ::std::underlying_type<::map::ConcreteType>::type>(
                    in.readBits(UINT8_C(32))));
}

template <>
void write<::map::ConcreteType>(BitStreamWriter& out, ::map::ConcreteType value)
{
    out.writeBits(enumToValue(value), UINT8_C(32));
}

} // namespace zserio
