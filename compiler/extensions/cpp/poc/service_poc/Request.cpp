/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <service_poc/Request.h>

namespace service_poc
{

Request::Request() noexcept :
        m_value_(int32_t())
{
}

Request::Request(::zserio::BitStreamReader& in) :
        m_value_(readValue(in))
{
}

int32_t Request::getValue() const
{
    return m_value_;
}

void Request::setValue(int32_t value_)
{
    m_value_ = value_;
}

size_t Request::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t Request::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

bool Request::operator==(const Request& other) const
{
    if (this != &other)
    {
        return
                (m_value_ == other.m_value_);
    }

    return true;
}

int Request::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void Request::read(::zserio::BitStreamReader& in)
{
    m_value_ = readValue(in);
}

void Request::write(::zserio::BitStreamWriter& out, ::zserio::PreWriteAction)
{
    out.writeSignedBits(m_value_, UINT8_C(32));
}

int32_t Request::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<int32_t>(in.readSignedBits(UINT8_C(32)));
}

} // namespace service_poc
