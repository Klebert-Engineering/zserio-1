/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#ifndef SERVICE_TYPES_SIMPLE_SERVICE_REQUEST_H
#define SERVICE_TYPES_SIMPLE_SERVICE_REQUEST_H

#include <type_traits>
#include <vector>
#include <grpcpp/impl/codegen/serialization_traits.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/byte_buffer.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

namespace service_types
{
namespace simple_service
{

class Request
{
public:
    Request() noexcept;

    explicit Request(
            int32_t value_) :
            m_value_(value_)
    {
    }

    explicit Request(::zserio::BitStreamReader& in);

    ~Request() = default;

    Request(const Request&) = default;
    Request& operator=(const Request&) = default;

    Request(Request&&) = default;
    Request& operator=(Request&&) = default;

    int32_t getValue() const;
    void setValue(int32_t value_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Request& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    int32_t readValue(::zserio::BitStreamReader& in);

    int32_t m_value_;
};

} // namespace simple_service
} // namespace service_types

#endif // SERVICE_TYPES_SIMPLE_SERVICE_REQUEST_H
