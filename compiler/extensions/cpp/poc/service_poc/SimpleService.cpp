/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#include "zserio/BitStreamWriter.h"
#include "zserio/BitStreamReader.h"

#include "SimpleService.h"

namespace service_poc
{

namespace SimpleService
{
    Service::Service() :
        m_methodMap({
                {"powerOfTwo", std::bind(&Service::powerOfTwoMethod, this,
                        std::placeholders::_1, std::placeholders::_2)},
                {"powerOfFour", std::bind(&Service::powerOfFourMethod, this,
                        std::placeholders::_1, std::placeholders::_2)}})
    {
    }

    void Service::callMethod(const std::string& methodName, const std::vector<uint8_t>& requestData,
                std::vector<uint8_t>& responseData, void*)
    {
        auto search = m_methodMap.find(methodName);
        if (search == m_methodMap.end())
            throw ::zserio::ServiceException("service_types.simple_service.SimpleService: Method '" + methodName + "' does not exist!");
        search->second(requestData, responseData);
    }

    void Service::powerOfTwoMethod(const std::vector<uint8_t>& requestData,
            std::vector<uint8_t>& responseData)
    {
        ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
        const Request request(reader);

        Response response;
        powerOfTwoImpl(request, response);

        responseData.resize(response.bitSizeOf() / 8 + ((response.bitSizeOf() % 8) ? 1 : 0));
        ::zserio::BitStreamWriter writer(responseData.data(), responseData.size());
        response.write(writer);
    }

    void Service::powerOfFourMethod(const std::vector<uint8_t>& requestData,
        std::vector<uint8_t>& responseData)
    {
        ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
        const Request request(reader);

        Response response;
        powerOfFourImpl(request, response);

        responseData.resize(response.bitSizeOf() / 8 + ((response.bitSizeOf() % 8) ? 1 : 0));
        ::zserio::BitStreamWriter writer(responseData.data(), responseData.size());
        response.write(writer);
    }

    const char* Service::serviceFullName() noexcept
    {
        return "service_poc.SimpleService";
    }

    const ::std::array<const char*, 2>& Service::methodNames() noexcept
    {
        static constexpr ::std::array<const char*, 2> names =
        {
            "powerOfTwo",
            "powerOfFour"
        };

        return names;
    }

    Client::Client(::zserio::IService& service) : m_service(service)
    {
    }

    void Client::powerOfTwoMethod(Request& request, Response& response)
    {
        std::vector<uint8_t> requestData(request.bitSizeOf() / 8 + ((request.bitSizeOf() % 8) ? 1 : 0));
        ::zserio::BitStreamWriter writer(requestData.data(), requestData.size());
        request.write(writer);

        std::vector<uint8_t> responseData;
        m_service.callMethod("powerOfTwo", requestData, responseData);

        ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
        response.read(reader);
    }

    void Client::powerOfFourMethod(Request& request, Response& response)
    {
        std::vector<uint8_t> requestData(request.bitSizeOf() / 8 + ((request.bitSizeOf() % 8) ? 1 : 0));
        ::zserio::BitStreamWriter writer(requestData.data(), requestData.size());
        request.write(writer);

        std::vector<uint8_t> responseData;
        m_service.callMethod("powerOfFour", requestData, responseData);

        ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
        response.read(reader);
    }
} // namespace SimpleService

} // namespace service_poc
