/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#include "zserio/BitStreamWriter.h"
#include "zserio/BitStreamReader.h"

#include "SimpleService.h"

namespace service_poc
{

namespace SimpleService
{
    Service::Service()
    :   m_procedureMap({
                {"SimpleService.powerOfTwo", std::bind(&Service::powerOfTwoCall, this,
                        std::placeholders::_1, std::placeholders::_2)},
                {"SimpleService.powerOfFour", std::bind(&Service::powerOfFourCall, this,
                        std::placeholders::_1, std::placeholders::_2)}})
    {
    }

    void Service::callProcedure(const std::string& procName, const std::vector<uint8_t>& requestData,
                std::vector<uint8_t>& responseData) const
    {
        // TODO: add check that method exits!
        auto search = m_procedureMap.find(procName);
        if (search != m_procedureMap.end())
            search->second(requestData, responseData);
    }

    void Service::powerOfTwoCall(const std::vector<uint8_t>& requestData,
            std::vector<uint8_t>& responseData) const
    {
        ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
        const Request request(reader);

        Response response;
        powerOfTwoImpl(request, response);

        responseData.resize(response.bitSizeOf() / 8 + 1);
        ::zserio::BitStreamWriter writer(responseData.data(), responseData.size());
        response.write(writer);
    }

    void Service::powerOfFourCall(const std::vector<uint8_t>& requestData,
        std::vector<uint8_t>& responseData) const
    {
        ::zserio::BitStreamReader reader(requestData.data(), requestData.size());
        const Request request(reader);

        Response response;
        powerOfFourImpl(request, response);

        responseData.resize(response.bitSizeOf() / 8 + 1);
        ::zserio::BitStreamWriter writer(responseData.data(), responseData.size());
        response.write(writer);
    }

    Client::Client(const ::zserio::IService& service)
    :   m_service(service)
    {
    }

    void Client::callPowerOfTwo(Request& request, Response& response) const
    {
        std::vector<uint8_t> requestData(request.bitSizeOf() / 8 + 1);
        ::zserio::BitStreamWriter writer(requestData.data(), requestData.size());
        request.write(writer);

        std::vector<uint8_t> responseData;
        m_service.callProcedure("SimpleService.powerOfTwo", requestData, responseData);

        ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
        response.read(reader);
    }

    void Client::callPowerOfFour(Request& request, Response& response) const
    {
        std::vector<uint8_t> requestData(request.bitSizeOf() / 8 + 1);
        ::zserio::BitStreamWriter writer(requestData.data(), requestData.size());
        request.write(writer);

        std::vector<uint8_t> responseData;
        m_service.callProcedure("SimpleService.powerOfFour", requestData, responseData);

        ::zserio::BitStreamReader reader(responseData.data(), responseData.size());
        response.read(reader);
    }
} // namespace SimpleService

} // namespace service_poc
