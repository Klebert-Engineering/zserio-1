/**
 * Automatically generated by Zserio C++ extension version 1.4.0-pre2.
 */

#ifndef SIMPLE_SERVICE_H
#define SIMPLE_SERVICE_H

#include <string>
#include <vector>
#include <functional>

#include <zserio/IServiceClient.h>

#include "service_poc/Request.h"
#include "service_poc/Response.h"

namespace service_poc
{

namespace SimpleService
{
    class Service : public ::zserio::IService
    {
    public:
        Service();
        virtual ~Service() = default;
       
        Service(const Service&) = default;
        Service& operator=(const Service&) = default;

        Service(Service&&) = default;
        Service& operator=(Service&&) = default;

        void callProcedure(const std::string& procName, const std::vector<uint8_t>& requestData,
                std::vector<uint8_t>& responseData) override;

    private:
        // Postfix Impl ensures no clash.
        void powerOfTwoImpl(const Request& request, Response& response) = 0;
        void powerOfFourImpl(const Request& request, Response& response) = 0;

        using Procedure = std::function<void(const Request& request, Response& response)>;

        std::map<std::string, Procedure> m_procedureMap;
    };

    class Client
    {
    public:
        explicit Client(::zserio::IService& service);
        ~Client() = default;
       
        Client(const Client&) = default;
        Client& operator=(const Client&) = default;
    
        Client(Client&&) = default;
        Client& operator=(Client&&) = default;
    
        // Prefix call ensures no clash.
        void callPowerOfTwo(const Request& request, Response& response);
        void callPowerOfFour(const Request& request, Response& response);
        
    private:
        zserio::IService& m_service;
    };
} // namespace SimpleService

} // namespace service_poc

#endif // ifndef SIMPLE_SERVICE_H
