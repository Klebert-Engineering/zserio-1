/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef CHOICE_H
#define CHOICE_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AnyHolder.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>


class Choice
{
public:
    Choice();
    // TODO: use expclicit in each constructor with reader (even with more than a single argument)
    explicit Choice(zserio::BitStreamReader& in,
            uint8_t selector_);

    // TODO: do we want this?
    template <typename T>
    explicit Choice(uint8_t selector_, T&& value_)
    :   m_selector_(selector_), m_isInitialized(true), m_objectChoice(std::forward<T>(value_))
    {}

    // new in cpp11 // TODO: is default really ok? see copy ctor!
    Choice(Choice&& other) = default;
    Choice& operator=(Choice&& other) = default;

    Choice(const Choice& other);
    Choice& operator=(const Choice& other);

    void initialize(
            uint8_t selector_);

    uint8_t getSelector() const;

    bool getValueBool() const;
    void setValueBool(bool valueBool);

    uint16_t getValue16() const;
    void setValue16(uint16_t value16);

    uint64_t getValue64() const;
    void setValue64(uint64_t value64);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Choice& other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& in);
    void write(zserio::BitStreamWriter& out,
            zserio::PreWriteAction preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint8_t m_selector_;
    bool m_isInitialized;
    zserio::AnyHolder m_objectChoice;
};


#endif // CHOICE_H
