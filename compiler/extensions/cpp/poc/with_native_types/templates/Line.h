/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef TEMPLATES_LINE_H
#define TEMPLATES_LINE_H

#include <vector>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Arrays.h>
#include <zserio/Types.h>
#include <zserio/HashCodeUtil.h>

#include <templates/Coordinate2D.h>

namespace templates
{

template <class ZSERIO_T_ARG_COORD, class ZSERIO_T_ARG_TYPE>
class Line
{
private:
    class ElementFactory_points
    {
    public:
        explicit ElementFactory_points(Line& owner) : m_owner(owner) {}

        void create(::std::vector<typename ZSERIO_T_ARG_COORD::type>& array, ::zserio::BitStreamReader& in, size_t index) const
        {
            (void)index;
            array.emplace_back(in, m_owner.getXOffset(), m_owner.getYOffset());
        }

    private:
        Line& m_owner;
    };

    class ElementInitializer_points
    {
    public:
        explicit ElementInitializer_points(Line& owner) : m_owner(owner) {}

        void initialize(typename ZSERIO_T_ARG_COORD::type& element, size_t index) const
        {
            (void)index;
            element.initialize(m_owner.getXOffset(), m_owner.getYOffset());
        }

    private:
        Line& m_owner;
    };

public:
    Line() noexcept :
            m_areChildrenInitialized(false),
            m_xOffset_(typename ZSERIO_T_ARG_TYPE::type()),
            m_yOffset_(typename ZSERIO_T_ARG_TYPE::type())
    {
    }

    template <typename ZSERIO_T_xOffset, typename ZSERIO_T_yOffset,
            typename ZSERIO_T_points>
    explicit Line(
            ZSERIO_T_xOffset&& xOffset_,
            ZSERIO_T_yOffset&& yOffset_,
            ZSERIO_T_points&& points_) :
            m_xOffset_(::std::forward<ZSERIO_T_xOffset>(xOffset_)),
            m_yOffset_(::std::forward<ZSERIO_T_yOffset>(yOffset_)),
            m_points_(::std::forward<ZSERIO_T_points>(points_))
    {
    }

    explicit Line(::zserio::BitStreamReader& in) :
            m_areChildrenInitialized(true),
            m_xOffset_(readXOffset(in)),
            m_yOffset_(readYOffset(in)),
            m_points_(readPoints(in))
    {
    }

    ~Line() = default;

    Line(const Line& other) :
            m_xOffset_(other.m_xOffset_),
            m_yOffset_(other.m_yOffset_),
            m_points_(other.m_points_)
    {
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;
    }

    Line& operator=(const Line& other)
    {
        m_xOffset_ = other.m_xOffset_;
        m_yOffset_ = other.m_yOffset_;
        m_points_ = other.m_points_;
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;

        return *this;
    }

    Line(Line&& other) :
            m_xOffset_(::std::move(other.m_xOffset_)),
            m_yOffset_(::std::move(other.m_yOffset_)),
            m_points_(::std::move(other.m_points_))
    {
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;
    }

    Line& operator=(Line&& other)
    {
        m_xOffset_ = ::std::move(other.m_xOffset_);
        m_yOffset_ = ::std::move(other.m_yOffset_);
        m_points_ = ::std::move(other.m_points_);
        if (other.m_areChildrenInitialized)
            initializeChildren();
        else
            m_areChildrenInitialized = false;

        return *this;
    }

    void initializeChildren()
    {
        ::zserio::initializeElements(m_points_, ElementInitializer_points(*this));

        m_areChildrenInitialized = true;
    }

    typename ZSERIO_T_ARG_TYPE::type& getXOffset()
    {
        return m_xOffset_;
    }

    const typename ZSERIO_T_ARG_TYPE::type& getXOffset() const
    {
        return m_yOffset_;
    }

    void setXOffset(const typename ZSERIO_T_ARG_TYPE::type& xOffset_)
    {
        m_xOffset_ = xOffset_;
    }

    void setXOffset(typename ZSERIO_T_ARG_TYPE::type&& xOffset_)
    {
        m_xOffset_ = std::move(xOffset_);
    }

    typename ZSERIO_T_ARG_TYPE::type& getYOffset()
    {
        return m_yOffset_;
    }

    const typename ZSERIO_T_ARG_TYPE::type& getYOffset() const
    {
        return m_yOffset_;
    }

    void setYOffset(const typename ZSERIO_T_ARG_TYPE::type& yOffset_)
    {
        m_yOffset_ = yOffset_;
    }

    void setYOffset(typename ZSERIO_T_ARG_TYPE::type&& yOffset_)
    {
        m_yOffset_ = std::move(yOffset_);
    }

    ::std::vector<typename ZSERIO_T_ARG_COORD::type>& getPoints()
    {
        return m_points_;
    }

    const ::std::vector<typename ZSERIO_T_ARG_COORD::type>& getPoints() const
    {
        return m_points_;
    }

    void setPoints(::std::vector<typename ZSERIO_T_ARG_COORD::type>& points_)
    {
        m_points_ = points_;
    }

    void setPoints(::std::vector<typename ZSERIO_T_ARG_COORD::type>&& points_)
    {
        m_points_ = std::move(points_);
    }

    size_t bitSizeOf(size_t bitPosition = 0) const
    {
        size_t endBitPosition = bitPosition;

        endBitPosition += m_xOffset_.bitSizeOf(endBitPosition);
        endBitPosition += m_yOffset_.bitSizeOf(endBitPosition);
        endBitPosition += ::zserio::bitSizeOfAuto(::zserio::TemplateObjectArrayTraits<ZSERIO_T_ARG_COORD>(), m_points_, endBitPosition);

        return endBitPosition - bitPosition;
    }

    size_t initializeOffsets(size_t bitPosition)
    {
        size_t endBitPosition = bitPosition;

        endBitPosition += m_xOffset_.initializeOffsets(endBitPosition);
        endBitPosition += m_yOffset_.initializeOffsets(endBitPosition);
        endBitPosition = ::zserio::initializeOffsetsAuto(::zserio::TemplateObjectArrayTraits<ZSERIO_T_ARG_COORD>(), m_points_, endBitPosition);

        return endBitPosition;
    }

    bool operator==(const Line& other) const
    {
        if (this != &other)
        {
            return
                    (m_xOffset_ == other.m_xOffset_) &&
                    (m_yOffset_ == other.m_yOffset_) &&
                    (m_points_ == other.m_points_);
        }

        return true;
    }

    int hashCode() const
    {
        int result = ::zserio::HASH_SEED;

        result = ::zserio::calcHashCode(result, m_xOffset_);
        result = ::zserio::calcHashCode(result, m_yOffset_);
        result = ::zserio::calcHashCode(result, m_points_);

        return result;
    }

    void read(::zserio::BitStreamReader& in)
    {
        m_xOffset_ = readXOffset(in);
        m_yOffset_ = readYOffset(in);
        m_points_ = readPoints(in);
    }

    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS)
    {
        if ((preWriteAction & ::zserio::PRE_WRITE_INITIALIZE_CHILDREN) != 0)
            initializeChildren();

        ZSERIO_T_ARG_TYPE::write(out, m_xOffset_);
        ZSERIO_T_ARG_TYPE::write(out, m_yOffset_);
        ::zserio::writeAuto(::zserio::TemplateObjectArrayTraits<ZSERIO_T_ARG_COORD>(), m_points_, out);
    }

private:
    typename ZSERIO_T_ARG_TYPE::type readXOffset(::zserio::BitStreamReader& in)
    {
        return ZSERIO_T_ARG_TYPE(in);
    }

    typename ZSERIO_T_ARG_TYPE::type readYOffset(::zserio::BitStreamReader& in)
    {
        return ZSERIO_T_ARG_TYPE(in);
    }

    ::std::vector<typename ZSERIO_T_ARG_COORD::type> readPoints(::zserio::BitStreamReader& in)
    {
        ::std::vector<typename ZSERIO_T_ARG_COORD::type> readField;
        ::zserio::readAuto(::zserio::TemplateObjectArrayTraits<ZSERIO_T_ARG_COORD, ElementFactory_points>(ElementFactory_points(*this)), readField, in);
        return readField;
    }

    bool m_areChildrenInitialized;
    ZSERIO_T_ARG_TYPE m_xOffset_;
    ZSERIO_T_ARG_TYPE m_yOffset_;
    ::std::vector<typename ZSERIO_T_ARG_COORD::type> m_points_;
};

} // namespace templates

#endif // TEMPLATES_LINE_H
