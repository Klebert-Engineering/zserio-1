/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <templates/U8.h>

namespace templates
{

U8::U8() noexcept :
        m_value_(uint8_t())
{
}

U8::U8(::zserio::BitStreamReader& in) :
        m_value_(readValue(in))
{
}

uint8_t U8::getValue() const
{
    return m_value_;
}

void U8::setValue(uint8_t value_)
{
    m_value_ = value_;
}

size_t U8::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t U8::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

bool U8::operator==(const U8& other) const
{
    if (this != &other)
    {
        return
                (m_value_ == other.m_value_);
    }

    return true;
}

int U8::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void U8::read(::zserio::BitStreamReader& in)
{
    m_value_ = readValue(in);
}

void U8::write(::zserio::BitStreamWriter& out, ::zserio::PreWriteAction)
{
    out.writeBits(m_value_, UINT8_C(8));
}

uint8_t U8::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

} // namespace templates
