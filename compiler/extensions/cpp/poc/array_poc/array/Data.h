/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef ARRAY_DATA_H
#define ARRAY_DATA_H

#include <type_traits>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

namespace array
{

class Data
{
public:
    Data() noexcept;

    explicit Data(
            uint32_t value_) :
            m_value_(value_)
    {
    }

    explicit Data(::zserio::BitStreamReader& in);

    ~Data() = default;

    Data(const Data&) = default;
    Data& operator=(const Data&) = default;

    Data(Data&&) = default;
    Data& operator=(Data&&) = default;

    uint32_t getValue() const;
    void setValue(uint32_t value_);

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t initializeOffsets(size_t bitPosition);

    bool operator==(const Data& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);
    void write(::zserio::BitStreamWriter& out,
            ::zserio::PreWriteAction preWriteAction = ::zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint32_t readValue(::zserio::BitStreamReader& in);

    uint32_t m_value_;
};

} // namespace array

#endif // ARRAY_DATA_H
