/**
 * Automatically generated by Zserio C++ extension version 2.11.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#ifndef TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_UTIL_OBJECT_H
#define TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_UTIL_OBJECT_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/PackingContext.h>
#include <zserio/ITypeInfo.h>
#include <zserio/IReflectable.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <test_object/std_allocator/ReflectableUtilChoice.h>

namespace test_object
{
namespace std_allocator
{

class ReflectableUtilObject
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getChoiceParam() { return m_choiceParam_; }
        ::test_object::std_allocator::ReflectableUtilChoice::ZserioPackingContext& getReflectableUtilChoice() { return m_reflectableUtilChoice_; }

    private:
        ::zserio::DeltaContext m_choiceParam_;
        ::test_object::std_allocator::ReflectableUtilChoice::ZserioPackingContext m_reflectableUtilChoice_;
    };

    ReflectableUtilObject() noexcept :
            ReflectableUtilObject(allocator_type())
    {}

    explicit ReflectableUtilObject(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_reflectableUtilChoice = ::test_object::std_allocator::ReflectableUtilChoice>
    ReflectableUtilObject(
            uint8_t choiceParam_,
            ZSERIO_T_reflectableUtilChoice&& reflectableUtilChoice_,
            const allocator_type& allocator = allocator_type()) :
            ReflectableUtilObject(allocator)
    {
        m_choiceParam_ = choiceParam_;
        m_reflectableUtilChoice_ = ::std::forward<ZSERIO_T_reflectableUtilChoice>(reflectableUtilChoice_);
    }

    explicit ReflectableUtilObject(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ReflectableUtilObject(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ReflectableUtilObject() = default;

    ReflectableUtilObject(const ReflectableUtilObject& other);
    ReflectableUtilObject& operator=(const ReflectableUtilObject& other);

    ReflectableUtilObject(ReflectableUtilObject&& other);
    ReflectableUtilObject& operator=(ReflectableUtilObject&& other);

    ReflectableUtilObject(::zserio::PropagateAllocatorT,
            const ReflectableUtilObject& other, const allocator_type& allocator);

    static const ::zserio::ITypeInfo& typeInfo();
    ::zserio::IReflectableConstPtr reflectable(const allocator_type& allocator = allocator_type()) const;
    ::zserio::IReflectablePtr reflectable(const allocator_type& allocator = allocator_type());

    void initializeChildren();

    uint8_t getChoiceParam() const;
    void setChoiceParam(uint8_t choiceParam_);

    const ::test_object::std_allocator::ReflectableUtilChoice& getReflectableUtilChoice() const;
    ::test_object::std_allocator::ReflectableUtilChoice& getReflectableUtilChoice();
    void setReflectableUtilChoice(const ::test_object::std_allocator::ReflectableUtilChoice& reflectableUtilChoice_);
    void setReflectableUtilChoice(::test_object::std_allocator::ReflectableUtilChoice&& reflectableUtilChoice_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ReflectableUtilObject& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint8_t readChoiceParam(::zserio::BitStreamReader& in);
    uint8_t readChoiceParam(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::test_object::std_allocator::ReflectableUtilChoice readReflectableUtilChoice(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::test_object::std_allocator::ReflectableUtilChoice readReflectableUtilChoice(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    uint8_t m_choiceParam_;
    ::test_object::std_allocator::ReflectableUtilChoice m_reflectableUtilChoice_;
};

} // namespace std_allocator
} // namespace test_object

#endif // TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_UTIL_OBJECT_H
