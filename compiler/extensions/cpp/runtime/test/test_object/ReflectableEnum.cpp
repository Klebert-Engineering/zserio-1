/**
 * Automatically generated by Zserio C++ extension version 2.9.0-pre1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/TypeInfo.h>
#include <zserio/AnyHolder.h>
#include <zserio/Reflectable.h>

#include <test_object/ReflectableEnum.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for ReflectableEnum enumeration.
constexpr ::std::array<const char*, 3> EnumTraits<::test_object::ReflectableEnum>::names;
constexpr ::std::array<::test_object::ReflectableEnum, 3> EnumTraits<::test_object::ReflectableEnum>::values;

template <>
const ::zserio::ITypeInfo& enumTypeInfo<::test_object::ReflectableEnum, ::std::allocator<uint8_t>>()
{
    using allocator_type = ::std::allocator<uint8_t>;

    static const ::zserio::Span<::zserio::StringView> underlyingTypeArguments;

    static const ::std::array<::zserio::ItemInfo, 3> items = {
        ::zserio::ItemInfo{ ::zserio::makeStringView("VALUE1"), static_cast<uint64_t>(INT8_C(-1)) },
        ::zserio::ItemInfo{ ::zserio::makeStringView("VALUE2"), static_cast<uint64_t>(INT8_C(0)) },
        ::zserio::ItemInfo{ ::zserio::makeStringView("VALUE3"), static_cast<uint64_t>(INT8_C(1)) }
    };

    static const ::zserio::EnumTypeInfo<allocator_type> typeInfo = {
        ::zserio::makeStringView("test_object.ReflectableEnum"),
        ::zserio::BuiltinTypeInfo<allocator_type>::getInt8(), underlyingTypeArguments, items
    };

    return typeInfo;
}

template <>
::zserio::IReflectablePtr enumReflectable(::test_object::ReflectableEnum value, const ::std::allocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::ReflectableBase<::std::allocator<uint8_t>>
    {
    public:
        explicit Reflectable(::test_object::ReflectableEnum value) :
                ::zserio::ReflectableBase<::std::allocator<uint8_t>>(
                        ::zserio::enumTypeInfo<::test_object::ReflectableEnum, ::std::allocator<uint8_t>>()),
                m_value(value)
        {}

        virtual size_t bitSizeOf(size_t) const override
        {
            return ::zserio::bitSizeOf(m_value);
        }

        virtual void write(::zserio::BitStreamWriter& writer) const override
        {
            ::zserio::write(writer, m_value);
        }

        virtual ::zserio::AnyHolder<> getAnyValue(const ::std::allocator<uint8_t>& allocator) const override
        {
            return ::zserio::AnyHolder<>(m_value, allocator);
        }

        virtual ::zserio::AnyHolder<> getAnyValue(const ::std::allocator<uint8_t>& allocator) override
        {
            return ::zserio::AnyHolder<>(m_value, allocator);
        }

        virtual int8_t getInt8() const override
        {
            return static_cast<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(m_value);
        }

        virtual int64_t toInt() const override
        {
            return static_cast<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(m_value);
        }

        virtual double toDouble() const override
        {
            return static_cast<double>(toInt());
        }

        virtual ::zserio::string<> toString(
                const ::std::allocator<uint8_t>& allocator = ::std::allocator<uint8_t>()) const override
        {
            return ::zserio::string<>(::zserio::enumToString(m_value), allocator);
        }

    private:
        ::test_object::ReflectableEnum m_value;
    };

    return std::allocate_shared<Reflectable>(allocator, value);
}

template <>
size_t enumToOrdinal(::test_object::ReflectableEnum value)
{
    switch (value)
    {
    case ::test_object::ReflectableEnum::VALUE1:
        return 0;
    case ::test_object::ReflectableEnum::VALUE2:
        return 1;
    case ::test_object::ReflectableEnum::VALUE3:
        return 2;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ReflectableEnum: ") <<
                static_cast<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(value) << "!";
    }
}

template <>
::test_object::ReflectableEnum valueToEnum(
        typename ::std::underlying_type<::test_object::ReflectableEnum>::type rawValue)
{
    switch (rawValue)
    {
    case INT8_C(-1):
    case INT8_C(0):
    case INT8_C(1):
        return ::test_object::ReflectableEnum(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ReflectableEnum: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::test_object::ReflectableEnum>(::test_object::ReflectableEnum value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::PackingContextNode& contextNode, ::test_object::ReflectableEnum value)
{
    contextNode.getContext().init(::zserio::StdIntArrayTraits<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(),
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::test_object::ReflectableEnum)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::PackingContextNode& contextNode, ::test_object::ReflectableEnum value)
{
    return contextNode.getContext().bitSizeOf(
            ::zserio::StdIntArrayTraits<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(),
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::test_object::ReflectableEnum value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::PackingContextNode& contextNode,
        size_t bitPosition, ::test_object::ReflectableEnum value)
{
    return bitPosition + bitSizeOf(contextNode, value);
}

template <>
::test_object::ReflectableEnum read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::test_object::ReflectableEnum>(
            static_cast<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(
                    in.readSignedBits(UINT8_C(8))));
}

template <>
::test_object::ReflectableEnum read(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::test_object::ReflectableEnum>(contextNode.getContext().read(
            ::zserio::StdIntArrayTraits<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(), in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::test_object::ReflectableEnum value)
{
    out.writeSignedBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out, ::test_object::ReflectableEnum value)
{
    contextNode.getContext().write(
            ::zserio::StdIntArrayTraits<typename ::std::underlying_type<::test_object::ReflectableEnum>::type>(),
            out, ::zserio::enumToValue(value));
}

} // namespace zserio
