/**
 * Automatically generated by Zserio C++ extension version 2.9.0-pre1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#ifndef TEST_OBJECT_DUMMY_ENUM_H
#define TEST_OBJECT_DUMMY_ENUM_H

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ITypeInfo.h>
#include <zserio/IReflectable.h>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace test_object
{

enum class DummyEnum : int8_t
{
    ONE = INT8_C(0),
    TWO = INT8_C(1),
    MinusOne = INT8_C(-1)
};

} // namespace test_object

namespace zserio
{

// This is full specialization of enumeration traits and methods for DummyEnum enumeration.
template <>
struct EnumTraits<::test_object::DummyEnum>
{
    static constexpr ::std::array<const char*, 3> names =
    {{
        "ONE",
        "TWO",
        "MinusOne"
    }};

    static constexpr ::std::array<::test_object::DummyEnum, 3> values =
    {{
        ::test_object::DummyEnum::ONE,
        ::test_object::DummyEnum::TWO,
        ::test_object::DummyEnum::MinusOne
    }};
};

template <>
const ::zserio::ITypeInfo& enumTypeInfo<::test_object::DummyEnum, ::std::allocator<uint8_t>>();

template <>
::zserio::IReflectablePtr enumReflectable(::test_object::DummyEnum value, const ::std::allocator<uint8_t>& allocator);

template <>
size_t enumToOrdinal<::test_object::DummyEnum>(::test_object::DummyEnum value);

template <>
::test_object::DummyEnum valueToEnum<::test_object::DummyEnum>(
        typename ::std::underlying_type<::test_object::DummyEnum>::type rawValue);

template <>
uint32_t enumHashCode<::test_object::DummyEnum>(::test_object::DummyEnum value);

template <>
void initPackingContext<::zserio::PackingContextNode, ::test_object::DummyEnum>(
        ::zserio::PackingContextNode& contextNode, ::test_object::DummyEnum value);

template <>
size_t bitSizeOf<::test_object::DummyEnum>(::test_object::DummyEnum value);

template <>
size_t bitSizeOf<::zserio::PackingContextNode, ::test_object::DummyEnum>(
        ::zserio::PackingContextNode& contextNode, ::test_object::DummyEnum value);

template <>
size_t initializeOffsets<::test_object::DummyEnum>(size_t bitPosition, ::test_object::DummyEnum value);

template <>
size_t initializeOffsets<::zserio::PackingContextNode, ::test_object::DummyEnum>(
        ::zserio::PackingContextNode& contextNode, size_t bitPosition, ::test_object::DummyEnum value);

template <>
::test_object::DummyEnum read<::test_object::DummyEnum>(::zserio::BitStreamReader& in);

template <>
::test_object::DummyEnum read<::test_object::DummyEnum, ::zserio::PackingContextNode>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in);

template <>
void write<::test_object::DummyEnum>(::zserio::BitStreamWriter& out, ::test_object::DummyEnum value);

template <>
void write<::zserio::PackingContextNode, ::test_object::DummyEnum>(
        ::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out, ::test_object::DummyEnum value);

} // namespace zserio

#endif // TEST_OBJECT_DUMMY_ENUM_H
