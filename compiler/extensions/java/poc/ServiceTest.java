import java.io.IOException;
import java.math.BigInteger;

import io.grpc.Server;
import io.grpc.inprocess.InProcessChannelBuilder;
import io.grpc.inprocess.InProcessServerBuilder;
import io.grpc.Channel;

import service_poc.*;
import zserio_runtime.ServiceInterface;
import zserio_service_grpc.ZserioService.GrpcService;
import zserio_service_grpc.ZserioService.GrpcClient;
import zserio_service_http.ZserioService.HttpClient;

public class ServiceTest
{
    public static void main(String args[]) throws IOException
    {
        // create SimpleService instance
        final ServiceInterface service = new SimpleServiceImpl();

        directCall(service, 2);
        grpcCall(service, 3);
        httpCall(service, 4);
    }

    private static void directCall(ServiceInterface service, int value) throws IOException
    {
        System.out.println("calling service directly:");
        doCall(service, value);
    }

    private static void grpcCall(ServiceInterface service, int value) throws IOException
    {
        System.out.println("calling service via gRPC:");

        // setup grpc server - wraps SimpleService by GrpcService and registers it to the server
        final Server grpcServer = InProcessServerBuilder.forName("SimpleService")
                .addService(new GrpcService(service)).build();
        grpcServer.start();

        // setup grpc client
        final Channel grpcChannel = InProcessChannelBuilder.forName("SimpleService").build();
        final GrpcClient grpcClient = new GrpcClient(grpcChannel);

        // use zserio GrpcClient as ServiceInterface
        doCall(grpcClient, value);

        grpcServer.shutdown();
    }

    private static void httpCall(ServiceInterface service, int value) throws IOException
    {
        System.out.println("calling service via HTTP:");

        // setup http client
        final HttpClient httpClient = new HttpClient("localhost", 5000);

        // use zserio HttpClient as ServiceInterface
        doCall(httpClient, value);
    }

    private static void doCall(ServiceInterface service, int value) throws IOException
    {
        // client fully generated by zserio
        final SimpleService.Client client = new SimpleService.Client(service);
        final Request request = new Request(value);
        Response response = client.callPowerOfTwo(request);
        System.out.println("    powerOfTwo(" + value + ") = " + response.getValue().toString());
        response = client.callPowerOfFour(request);
        System.out.println("    powerOfFour(" + value + ") = " + response.getValue().toString());
    }

    /** SimpleService implementation. */
    private static class SimpleServiceImpl extends SimpleService.Service
    {
        @Override
        protected Response powerOfTwoImpl(Request request)
        {
            final Response response = new Response();
            response.setValue(BigInteger.valueOf(request.getValue()).pow(2));
            return response;
        }

        @Override
        protected Response powerOfFourImpl(Request request)
        {
            final Response response = new Response();
            response.setValue(BigInteger.valueOf(request.getValue()).pow(4));
            return response;
        }
    }
}
