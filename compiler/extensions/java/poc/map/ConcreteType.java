/**
 * Automatically generated by Zserio Java extension version 1.2.0.
 */


import javax.annotation.Generated;
import java.io.IOException;
import zserio.runtime.SizeOf;
import zserio.runtime.ZserioEnum;
import zserio.runtime.ZserioError;
import zserio.runtime.ZserioReader;
import zserio.runtime.ZserioWriter;
import zserio.runtime.io.BitStreamReader;
import zserio.runtime.io.BitStreamWriter;
import zserio.runtime.io.InitializeOffsetsWriter;

@Generated(
    value = "zserio.tools.ZserioTool",
    comments = "generated by Zserio Java extension version 1.2.0"
)
public enum ConcreteType implements InitializeOffsetsWriter, SizeOf, ZserioEnum, ZserioReader, ZserioWriter
{
    U32(0L),
    STRING(1L),
    DOUBLE(2L);

    private ConcreteType(long __value)
    {
        this.__value = __value;
    }

    public long getValue()
    {
        return __value;
    }

    @Override
    public Number getGenericValue()
    {
        return __value;
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long __bitPosition)
    {
        return 32;
    }

    @Override
    public long initializeOffsets(long __bitPosition) throws ZserioError
    {
        return __bitPosition + bitSizeOf(__bitPosition);
    }

    @Override
    public void write(BitStreamWriter __out) throws IOException
    {
        write(__out, false);
    }

    @Override
    public void write(BitStreamWriter __out, boolean __callInitializeOffsets) throws IOException
    {
        __out.writeUnsignedInt(getValue());
    }

    @Override
    public void read(BitStreamReader __in) throws IOException
    {
        __value = toEnum(__in.readUnsignedInt()).getValue();
    }

    public static ConcreteType readEnum(BitStreamReader __in) throws IOException
    {
        return toEnum(__in.readUnsignedInt());
    }

    public static ConcreteType toEnum(long __value)
    {
        if (__value == 0L)
            return U32;
        if (__value == 1L)
            return STRING;
        if (__value == 2L)
            return DOUBLE;

        throw new IllegalArgumentException("Unknown value for enumeration ConcreteType: " + __value + "!");
    }

    private long __value;
}
