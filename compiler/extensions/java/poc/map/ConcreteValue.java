/**
 * Automatically generated by Zserio Java extension version 1.2.0.
 */


import javax.annotation.Generated;
import java.io.IOException;
import java.io.File;
import zserio.runtime.SizeOf;
import zserio.runtime.io.BitStreamReader;
import zserio.runtime.io.FileBitStreamReader;
import zserio.runtime.ZserioError;
import zserio.runtime.Util;
import zserio.runtime.io.BitStreamWriter;
import zserio.runtime.io.FileBitStreamWriter;
import zserio.runtime.io.InitializeOffsetsWriter;
import zserio.runtime.BitSizeOfCalculator;
import zserio.runtime.ZserioReader;
import zserio.runtime.ZserioWriter;

@Generated(
    value = "zserio.tools.ZserioTool",
    comments = "generated by Zserio Java extension version 1.2.0"
)
public class ConcreteValue implements InitializeOffsetsWriter, SizeOf, ZserioReader, ZserioWriter
{
    public ConcreteValue(
            ConcreteType type)
    {
        this.type = type;
    }

    public ConcreteValue(File __file,
            ConcreteType type) throws IOException, ZserioError
    {
        this.type = type;

        final FileBitStreamReader __in = new FileBitStreamReader(__file);
        read(__in);
        __in.close();
    }

    public ConcreteValue(BitStreamReader __in,
            ConcreteType type) throws IOException, ZserioError
    {
        this.type = type;

        read(__in);
    }

    @Override
    public int bitSizeOf() throws ZserioError
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long __bitPosition) throws ZserioError
    {
        long __endBitPosition = __bitPosition;

        switch (getType())
        {
        case U32:
            __endBitPosition += 32;
            break;
        case STRING:
            __endBitPosition += BitSizeOfCalculator.getBitSizeOfString(getValueString());
            break;
        case DOUBLE:
            __endBitPosition += 64;
            break;
        default:
            throw new ZserioError("No match in choice ConcreteValue: " + getType() + "!");
        }

        return (int)(__endBitPosition - __bitPosition);
    }

    public ConcreteType getType()
    {
        return this.type;
    }

    
    public long getValueU32()
    {
        return (Long) this.__objectChoice;
    }

    public void setValueU32(long valueU32)
    {
        this.__objectChoice = valueU32;
    }

    
    public String getValueString()
    {
        return (String) this.__objectChoice;
    }

    public void setValueString(String valueString)
    {
        this.__objectChoice = valueString;
    }

    
    public double getValueDouble()
    {
        return (Double) this.__objectChoice;
    }

    public void setValueDouble(double valueDouble)
    {
        this.__objectChoice = valueDouble;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj instanceof ConcreteValue)
        {
            final ConcreteValue __that = (ConcreteValue)obj;

            return
                    ((this.type == null) ? __that.type == null : this.type.getValue() == __that.type.getValue()) &&
                    (
                        (this.__objectChoice == null && __that.__objectChoice == null) ||
                        (this.__objectChoice != null && this.__objectChoice.equals(__that.__objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int __result = Util.HASH_SEED;

        __result = Util.HASH_PRIME_NUMBER * __result + ((type == null) ? 0 : type.hashCode());
        __result = Util.HASH_PRIME_NUMBER * __result + ((__objectChoice == null) ? 0 : __objectChoice.hashCode());

        return __result;
    }

    public void read(final BitStreamReader __in) throws IOException, ZserioError
    {
        switch (getType())
        {
        case U32:
            __objectChoice = __in.readUnsignedInt();
            break;
        case STRING:
            __objectChoice = __in.readString();
            break;
        case DOUBLE:
            __objectChoice = __in.readFloat64();
            break;
        default:
            throw new ZserioError("No match in choice ConcreteValue: " + getType() + "!");
        }
    }

    public long initializeOffsets(long __bitPosition) throws ZserioError
    {
        long __endBitPosition = __bitPosition;

        switch (getType())
        {
        case U32:
            {
                __endBitPosition += 32;
            }
            break;
        case STRING:
            {
                __endBitPosition += BitSizeOfCalculator.getBitSizeOfString(getValueString());
            }
            break;
        case DOUBLE:
            {
                __endBitPosition += 64;
            }
            break;
        default:
            throw new ZserioError("No match in choice ConcreteValue: " + getType() + "!");
        }

        return __endBitPosition;
    }

    public void write(File __file) throws IOException, ZserioError
    {
        FileBitStreamWriter __out = new FileBitStreamWriter(__file);
        write(__out);
        __out.close();
    }

    @Override
    public void write(BitStreamWriter __out) throws IOException, ZserioError
    {
        write(__out, true);
    }

    @Override
    public void write(BitStreamWriter __out, boolean __callInitializeOffsets) throws IOException, ZserioError
    {
        switch (getType())
        {
        case U32:
            __out.writeUnsignedInt(getValueU32());
            break;
        case STRING:
            __out.writeString(getValueString());
            break;
        case DOUBLE:
            __out.writeFloat64(getValueDouble());
            break;
        default:
            throw new ZserioError("No match in choice ConcreteValue: " + getType() + "!");
        }
    }

    private final ConcreteType type;
    private Object __objectChoice;
}
