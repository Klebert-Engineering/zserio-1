/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include <zserio/Arrays.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include "Data.h"


Data::Data() noexcept
{}

Data::Data(zserio::BitStreamReader& in)
{
    read(in);
}

uint32_t Data::getLen() const noexcept
{
    return m_len_;
}

void Data::setLen(uint32_t len)
{
    m_len_ = len;
}

std::vector<uint32_t>& Data::getArray() noexcept
{
    return m_array_;
}

const std::vector<uint32_t>& Data::getArray() const noexcept
{
    return m_array_;
}

void Data::setArray(const std::vector<uint32_t>& _array)
{
    m_array_ = _array;
}

void Data::setArray(std::vector<uint32_t>&& _array)
{
    m_array_ = std::move(_array);
}

void Data::setArray(std::initializer_list<uint32_t> _array)
{
    m_array_ = _array;
}

size_t Data::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);
    endBitPosition += zserio::bitSizeOf<zserio::StdIntArrayTraits<uint32_t>>(m_array_, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Data::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);
    endBitPosition = zserio::bitSizeOf<zserio::StdIntArrayTraits<uint32_t>>(m_array_, endBitPosition);

    return endBitPosition;
}

bool Data::operator==(const Data& other) const
{
    if (this != &other)
    {
        return
                (m_len_ == other.m_len_) &&
                (m_array_ == other.m_array_);
    }

    return true;
}

int Data::hashCode() const
{
    int _result = zserio::HASH_SEED;

    _result = zserio::calcHashCode(_result, m_len_);
    _result = zserio::calcHashCode(_result, zserio::hashCode(m_array_));

    return _result;
}

void Data::read(zserio::BitStreamReader& in)
{
    m_len_ = (uint32_t)in.readBits(UINT8_C(32));
    zserio::read<zserio::StdIntArrayTraits<uint32_t>>(m_array_, in, static_cast<size_t>(getLen()), nullptr);
}

void Data::write(zserio::BitStreamWriter& out, zserio::PreWriteAction)
{
    out.writeBits(m_len_, UINT8_C(32));
    if (m_array_.size() != static_cast<size_t>(getLen()))
    {
        throw zserio::CppRuntimeException("Write: Wrong array length for field Data.array: " +
                zserio::convertToString(m_array_.size()) + " != " +
                zserio::convertToString(static_cast<size_t>(getLen())) + "!");
    }

    zserio::write<zserio::StdIntArrayTraits<uint32_t>>(m_array_, out);
}
