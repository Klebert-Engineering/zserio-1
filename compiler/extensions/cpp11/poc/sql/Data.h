/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef DATA_H
#define DATA_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

class Data
{
public:
    Data() noexcept;
    explicit Data(zserio::BitStreamReader& _in);

    // new in cpp11
    template <typename ZSERIO_T_array>
    explicit Data(uint32_t _len, ZSERIO_T_array&& _array)
    :   m_len_(_len), m_array_(std::forward<ZSERIO_T_array>(_array))
    {}

    // new in cpp11
    explicit Data(uint32_t _len, std::initializer_list<uint32_t> _array)
    :   m_len_(_len), m_array_(_array)
    {
    }

    uint32_t getLen() const noexcept;
    void setLen(uint32_t _len);

    std::vector<uint32_t>& getArray() noexcept; // TODO: use noexcept where possible
    const std::vector<uint32_t>& getArray() const noexcept;
    void setArray(const std::vector<uint32_t>& _array);
    void setArray(std::vector<uint32_t>&& _array);
    void setArray(std::initializer_list<uint32_t> _array);

    size_t bitSizeOf(size_t _bitPosition = 0) const;
    size_t initializeOffsets(size_t _bitPosition);

    bool operator==(const Data& other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& in);
    void write(zserio::BitStreamWriter& out,
            zserio::PreWriteAction preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS);

private:
    uint32_t m_len_;
    std::vector<uint32_t> m_array_;
};


#endif // DATA_H
