/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#include "Color.h"

#include "zserio/CppRuntimeException.h"
#include "zserio/StringConvertUtil.h"

// This is full specialization for Color enumeration.
namespace zserio
{

namespace enums
{

template<>
size_t toOrdinal<enumeration_types::bitfield_enum::Color>(enumeration_types::bitfield_enum::Color value)
{
    switch (value)
    {
    case enumeration_types::bitfield_enum::Color::NONE:
        return 0;
    case enumeration_types::bitfield_enum::Color::RED:
        return 1;
    case enumeration_types::bitfield_enum::Color::BLUE:
        return 2;
    case enumeration_types::bitfield_enum::Color::BLACK:
        return 3;
    default:
        throw zserio::CppRuntimeException("Unknown value for enumeration Color: " +
                zserio::convertToString(static_cast<uint8_t>(value)) + "!");
    }
}

template<>
enumeration_types::bitfield_enum::Color fromValue(
        typename std::underlying_type<enumeration_types::bitfield_enum::Color>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(2):
    case UINT8_C(3):
    case UINT8_C(7):
        return enumeration_types::bitfield_enum::Color(rawValue);
    default:
        throw zserio::CppRuntimeException("Unknown value for enumeration Color: " +
                zserio::convertToString(rawValue) + "!");
    }
}

constexpr std::array<const char*, 4> Traits<enumeration_types::bitfield_enum::Color>::names;
constexpr std::array<enumeration_types::bitfield_enum::Color, 4> Traits<enumeration_types::bitfield_enum::Color>::values;

} // namespace enums

} // namespace zserio
