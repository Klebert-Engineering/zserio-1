/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
#define ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H

#include <array>

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

namespace enumeration_types
{
namespace bitfield_enum
{

enum class Color : uint8_t
{
    NONE = UINT8_C(0),
    RED = UINT8_C(2),
    BLUE = UINT8_C(3),
    BLACK = UINT8_C(7)
};

} // namespace bitfield_enum
} // namespace enumeration_types

// This should be implemented in runtime library header.
namespace zserio
{

template<typename T>
class EnumUtil
{
};

} // namespace zserio

// This is full specialization for Color enumeration.
namespace zserio
{

template<>
class EnumUtil<enumeration_types::bitfield_enum::Color>
{
public:
    static const char* toString(enumeration_types::bitfield_enum::Color value);
    static enumeration_types::bitfield_enum::Color toEnum(uint8_t rawValue);

    static constexpr std::array<enumeration_types::bitfield_enum::Color, 4> values =
    {
        enumeration_types::bitfield_enum::Color::NONE,
        enumeration_types::bitfield_enum::Color::RED,
        enumeration_types::bitfield_enum::Color::BLUE,
        enumeration_types::bitfield_enum::Color::BLACK
    };
};

} // namespace zserio

#endif // ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
