/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
#define ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H

#include <string>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/PreWriteAction.h>
#include <zserio/Types.h>

namespace enumeration_types
{
namespace bitfield_enum
{

class Color
{
public:
    enum class EnumType : uint8_t
    {
        NONE = UINT8_C(0),
        RED = UINT8_C(2),
        BLUE = UINT8_C(3),
        BLACK = UINT8_C(7)
    };

    static const EnumType NONE = EnumType::NONE;
    static const EnumType RED = EnumType::RED;
    static const EnumType BLUE = EnumType::BLUE;
    static const EnumType BLACK = EnumType::BLACK;

    Color();
    Color(EnumType value);
    explicit Color(uint8_t rawValue);
    explicit Color(zserio::BitStreamReader& _in);

    operator EnumType() const;
    uint8_t getValue() const;

    size_t bitSizeOf(size_t _bitPosition = 0) const;
    size_t initializeOffsets(size_t _bitPosition = 0) const;

    bool operator==(const Color& other) const;
    bool operator==(EnumType other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& _in);
    void write(zserio::BitStreamWriter& _out,
            zserio::PreWriteAction _preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS) const;

    const char* toString() const;

    static constexpr std::array<EnumType> getEnumValues();
    static constexpr std::array<const char*> getEnumStrings();

private:
    EnumType m_value;
};

} // namespace bitfield_enum
} // namespace enumeration_types

#endif // ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
