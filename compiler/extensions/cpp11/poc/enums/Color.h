/**
 * Automatically generated by Zserio C++ extension version 1.2.0.
 */

#ifndef ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
#define ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H

#include <array>

#include "Enums.h"

namespace enumeration_types
{

namespace bitfield_enum
{

enum class Color : uint8_t
{
    NONE = UINT8_C(0),
    RED = UINT8_C(2),
    BLUE = UINT8_C(3),
    BLACK = UINT8_C(7)
};

} // namespace bitfield_enum

} // namespace enumeration_types

// This is full specialization for Color enumeration.
namespace zserio
{

template<>
struct EnumTraits<enumeration_types::bitfield_enum::Color>
{
    static constexpr std::array<const char*, 4> names =
    {
        "NONE",
        "RED",
        "BLUE",
        "BLACK"
    };

    static constexpr std::array<enumeration_types::bitfield_enum::Color, 4> values =
    {
        enumeration_types::bitfield_enum::Color::NONE,
        enumeration_types::bitfield_enum::Color::RED,
        enumeration_types::bitfield_enum::Color::BLUE,
        enumeration_types::bitfield_enum::Color::BLACK
    };
};

template<>
size_t enumToOrdinal<enumeration_types::bitfield_enum::Color>(enumeration_types::bitfield_enum::Color value);

template<>
enumeration_types::bitfield_enum::Color valueToEnum<enumeration_types::bitfield_enum::Color>(
        typename std::underlying_type<enumeration_types::bitfield_enum::Color>::type rawValue);

template <>
inline constexpr size_t bitSizeOf<enumeration_types::bitfield_enum::Color>(enumeration_types::bitfield_enum::Color value)
{
    return 3;
}

template <>
inline constexpr size_t initializeOffsets<enumeration_types::bitfield_enum::Color>(enumeration_types::bitfield_enum::Color value,
        size_t bitPosition)
{
    return bitPosition + 3;
}

template <>
inline enumeration_types::bitfield_enum::Color read<enumeration_types::bitfield_enum::Color>(zserio::BitStreamReader& in)
{
    return valueToEnum<enumeration_types::bitfield_enum::Color>(
            static_cast<typename std::underlying_type<enumeration_types::bitfield_enum::Color>::type>(in.readSignedBits(3)));
}

template <>
inline void write<enumeration_types::bitfield_enum::Color>(BitStreamWriter& out, enumeration_types::bitfield_enum::Color value)
{
    out.writeSignedBits(enumToValue(value), 3);
}

} // namespace zserio

#endif // ENUMERATION_TYPES_BITFIELD_ENUM_COLOR_H
