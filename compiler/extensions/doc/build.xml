<!--

Ant build.xml for Zserio Doc Extension.

Zserio Doc Extension is implemented as Java service which can be dynamically loaded by Zserio core during
runtime. It generates HTML documentation together with the database structure diagrams and type collaboration
diagrams in DOT and SVG formats.

The following external properties can be set:

zserio_extensions.build_dir   - Zserio extensions build directory.
                                Default is "../../../build/compiler/extensions".
zserio_extensions.install_dir - Zserio extensions install directory.
                                Default is "../../../distr/zserio_libs".
zserio_doc.build_dir          - Directory where to put generated files.
                                Default is "${zserio_extensions.build_dir}/doc".
zserio_doc.install_dir        - Directory where to install Zserio Doc Extension jar file.
                                Default is "${zserio_extensions.install_dir}".
zserio_core.jar_file          - Zserio core jar file used for classpath.
                                Default is "${zserio_extensions.build_dir}/../core/jar/zserio_core.jar".
spotbugs.home_dir             - Location of the spotbugs tool. If not set, spotbugs is not run.

-->
<project name="zserio_doc" basedir="." default="jar">
    <dirname property="zserio_doc.base_dir" file="${ant.file.zserio_doc}"/>

    <property name="zserio_doc.zserio_root" value="${zserio_doc.base_dir}/../../.."/>

    <property name="zserio_extensions.build_dir" value="${zserio_doc.zserio_root}/build/compiler/extensions"/>
    <property name="zserio_extensions.install_dir" value="${zserio_doc.zserio_root}/distr/zserio_libs"/>
    <property name="zserio_doc.build_dir" value="${zserio_extensions.build_dir}/doc"/>
    <property name="zserio_doc.install_dir" value="${zserio_extensions.install_dir}"/>
    <property name="zserio_core.jar_file" value="${zserio_extensions.build_dir}/../core/jar/zserio_core.jar"/>

    <property name="zserio_doc.src_dir" value="${zserio_doc.base_dir}/src"/>
    <property name="zserio_doc.runtime_dir" value="${zserio_doc.base_dir}/runtime"/>
    <property name="zserio_doc.classes_dir" value="${zserio_doc.build_dir}/classes"/>
    <property name="zserio_doc.spotbugs.out_dir" value="${zserio_doc.build_dir}/spotbugs"/>

    <property name="zserio_doc.jar_dir" value="${zserio_doc.build_dir}/jar"/>
    <property name="zserio_doc.jar_file" value="${zserio_doc.jar_dir}/zserio_doc.jar"/>

    <property name="3rdparty.root_dir" value="${zserio_doc.zserio_root}/3rdparty"/>
    <property name="3rdparty.jar_dir" value="${3rdparty.root_dir}/java"/>
    <property name="3rdparty.commonmark.jar_file_name" value="commonmark-0.15.2.jar"/>
    <property name="3rdparty.commonmark_ext_autolink.jar_file_name"
        value="commonmark-ext-autolink-0.15.2.jar"/>
    <property name="3rdparty.commonmark_ext_heading_anchor.jar_file_name"
        value="commonmark-ext-heading-anchor-0.15.2.jar"/>
    <property name="3rdparty.commonmark_ext_gfm_tables.jar_file_name"
        value="commonmark-ext-gfm-tables-0.15.2.jar"/>
    <property name="3rdparty.autolink.jar_file_name" value="autolink-0.10.0.jar"/>

    <fileset dir="${3rdparty.jar_dir}" id="3rdparty.jar_files_ref">
        <include name="${3rdparty.commonmark.jar_file_name}"/>
        <include name="${3rdparty.commonmark_ext_autolink.jar_file_name}"/>
        <include name="${3rdparty.commonmark_ext_heading_anchor.jar_file_name}"/>
        <include name="${3rdparty.commonmark_ext_gfm_tables.jar_file_name}"/>
        <include name="${3rdparty.autolink.jar_file_name}"/>
    </fileset>

    <path id="zserio_doc.classpath_zserio_core">
        <pathelement location="${zserio_core.jar_file}"/>
    </path>

    <!-- Zserio Documentation extension version. -->
    <loadfile
        encoding="UTF-8"
        property="zserio_doc.version"
        srcFile="${basedir}/src/zserio/extension/doc/DocExtensionVersion.java">
        <filterchain>
            <striplinebreaks/>
            <tokenfilter>
                <replaceregex
                    pattern='.*VERSION_STRING\s*=\s*"([0-9]+.[0-9]+.[0-9]+(-[A-Za-z0-9]+)?)".*'
                    replace="\1"/>
            </tokenfilter>
        </filterchain>
    </loadfile>

    <target name="clean">
        <delete dir="${zserio_doc.build_dir}"/>
    </target>

    <target name="compile">
        <mkdir dir="${zserio_doc.classes_dir}"/>
        <depend srcDir="${zserio_doc.src_dir}" destDir="${zserio_doc.classes_dir}"
            cache="${zserio_doc.build_dir}/depend-cache"/>

        <javac srcdir="${zserio_doc.src_dir}" destdir="${zserio_doc.classes_dir}" debug="on"
            encoding="utf8" includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Werror"/>
            <classpath>
                <path refid="zserio_doc.classpath_zserio_core"/>
                <fileset refid="3rdparty.jar_files_ref"/>
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${zserio_doc.jar_dir}"/>
        <copy todir="${zserio_doc.build_dir}/metainf" overwrite="true">
            <fileset dir="${zserio_doc.base_dir}/metainf"/>
        </copy>

        <pathconvert pathsep=" " property="3rdparty.jar_files" refid="3rdparty.jar_files_ref">
            <mapper type="flatten"/>
        </pathconvert>

        <jar destfile="${zserio_doc.jar_file}">
            <fileset dir="${zserio_doc.classes_dir}">
                <include name="zserio/**"/>
            </fileset>
            <zipfileset dir="${zserio_doc.base_dir}/freemarker" includes="*.ftl" prefix="freemarker/doc"/>
            <zipfileset dir="${zserio_doc.runtime_dir}" prefix="zserio/extension/doc/runtime"/>
            <manifest>
                <attribute name="Class-Path" value="${3rdparty.jar_files}"/>
                <attribute name="Implementation-Version" value="${zserio_doc.version}"/>
            </manifest>
            <metainf dir="${zserio_doc.build_dir}/metainf" includes="**/*"/>
        </jar>

        <!-- Copying of 3rd party jar files are necessary because of extensions. Extension projects use
        Zserio core build directory directly. -->
        <copy todir="${zserio_doc.jar_dir}">
            <fileset refid="3rdparty.jar_files_ref"/>
        </copy>
    </target>

    <target name="install" depends="jar">
        <mkdir dir="${zserio_doc.install_dir}"/>
        <copy todir="${zserio_doc.install_dir}" overwrite="true">
            <fileset dir="${zserio_doc.jar_dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="spotbugs" depends="install" if="spotbugs.home_dir">
        <mkdir dir="${zserio_doc.spotbugs.out_dir}"/>
        <taskdef classpath="${spotbugs.home_dir}/lib/spotbugs-ant.jar"
            resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
        <spotbugs home="${spotbugs.home_dir}"
            output="html"
            outputFile="${zserio_doc.spotbugs.out_dir}/spotbugs.html"
            reportLevel="low"
            errorProperty="zserio_doc.is_failed"
            warningsProperty="zserio_doc.is_failed">
            <sourcePath>
                <dirset dir="${zserio_doc.src_dir}"/>
            </sourcePath>
            <fileset dir="${zserio_doc.classes_dir}"/>
            <auxClasspath>
                <path refid="zserio_doc.classpath_zserio_core"/>
                <fileset refid="3rdparty.jar_files_ref"/>
            </auxClasspath>
        </spotbugs>
        <fail message="SpotBugs found some issues!" if="zserio_doc.is_failed"/>
    </target>

    <target name="test" depends="spotbugs">
    </target>
</project>
