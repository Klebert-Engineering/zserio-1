package zserio.ast;

import zserio.antlr.ZserioParser;
import zserio.antlr.ZserioParserTokenTypes;
import zserio.antlr.util.BaseTokenAST;
import zserio.antlr.util.TokenTypeDescriptor;
import zserio.antlr.util.ParserException;
import zserio.ast.doc.DocCommentToken;
import zserio.tools.ZserioToolPrinter;
import antlr.CommonHiddenStreamToken;
import antlr.Token;

/**
 * The base class for all AST token used by Zserio grammar.
 *
 * The static method setTokenTypeNames must be called from application before parsing to set token type names
 * stored in parser generated by ANTLR. The token type names from parser is needed for isTokenLiteral method.
 */
public class TokenAST extends BaseTokenAST
{
    /**
     * Empty constructor.
     */
    public TokenAST()
    {
        super(tokenTypeDescriptor);
    }

    /**
     * Constructor from lexer token.
     *
     * @param lexerToken Lexer token to construct from.
     */
    public TokenAST(Token lexerToken)
    {
        super(tokenTypeDescriptor, lexerToken);
    }

    /**
     * Gets hidden documentation comment associated to this token.
     *
     * @return Documentation comment token associated to this token.
     */
    public DocCommentToken getHiddenDocComment()
    {
        return hiddenDocCommentString != null ? hiddenDocCommentString.getDocCommentToken() : null;
    }

    /**
     * Return whether the token is a keyword.
     *
     * @return Returns true if token is a keyword.
     */
    public boolean isKeyword()
    {
        return TokenAST.isKeyword(getType());
    }

    /**
     * Return whether the token type corresponds to a keyword.
     *
     * @return Returns true if the token type corresponds to a keyword.
     */
    public static boolean isKeyword(int tokenType)
    {
        // all keywords (i.e. token literals) are defined in ZserioParser,
        // so no unknown token can be a keyword
        final Boolean isKeyword = tokenTypeDescriptor.isKeyword(tokenType);
        return isKeyword != null ? isKeyword : false;
    }

    /**
     * Evaluates hidden documentation comment if it is found as hidden before this token.
     *
     * @param owner Zserio type to which belongs this documentation comment.
     *
     * @return True if the hidden documentation comment was found, false otherwise.
     *
     * @throws ParserException Throws in case of invalid AST token.
     */
    public boolean evaluateHiddenDocComment(ZserioType owner) throws ParserException
    {
        final CommonHiddenStreamToken hiddenLexerToken = getHiddenBefore();
        if (hiddenLexerToken != null && hiddenLexerToken.getType() == ZserioParserTokenTypes.DOC_COMMENT)
        {
            hiddenDocCommentString = new DocCommentString(hiddenLexerToken, owner);
            hiddenDocCommentString.evaluateAll();
            isDocCommentUsed = true;
            return true;
        }
        return false;
    }

    /**
     * Marks that the doc comment is not used.
     */
    public void setDocCommentNotUsed()
    {
        isDocCommentUsed = false;
    }

    /**
     * Checks token integrity together with all its children.
     *
     * @throws ParserException Throws if integrity checking fails.
     */
    public void checkAll() throws ParserException
    {
        for (TokenAST child = (TokenAST)getFirstChild(); child != null;
                child = (TokenAST)child.getNextSibling())
            child.checkAll();

        check();

        if (hiddenDocCommentString != null)
            hiddenDocCommentString.checkAll();

        // check for unused doc comments
        final CommonHiddenStreamToken hiddenLexerToken = getHiddenBefore();
//        if (hiddenLexerToken != null && hiddenLexerToken.getType() == ZserioParserTokenTypes.DOC_COMMENT &&
//            !isDocCommentUsed)
//            ZserioToolPrinter.printWarning(hiddenLexerToken.getFilename(), hiddenLexerToken.getLine(),
//                                           hiddenLexerToken.getColumn(), "Documentation comment is not used!");
    }

    /**
     * Checks token integrity.
     *
     * This method should be implemented by inherited class.
     *
     * @throws ParserException Throws if integrity checking fails.
     */
    protected void check() throws ParserException
    {
    }

    private static final long serialVersionUID = -5714491131044639444L;
    private static final TokenTypeDescriptor tokenTypeDescriptor =
            new TokenTypeDescriptor(ZserioParser.class);

    private DocCommentString hiddenDocCommentString = null;
    private boolean isDocCommentUsed = false;
}
